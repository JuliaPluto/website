[{"url":".","title":"index","tags":["welcome"],"text":""},{"url":"sidebar data/","title":"sidebar data","tags":[],"text":"Dict \"en\" Dict \"docs\" \"Introduction\" collections \"docs\" .pages ‚à© collections \"introduction\" .pages, \"Using Pluto\" collections \"docs\" .pages ‚à© collections \"navigation\" .pages, \"Reproducibility\" collections \"docs\" .pages ‚à© collections \"reproducibility\" .pages, \"Editor\" collections \"docs\" .pages ‚à© collections \"editor\" .pages, \"Publishing\" collections \"docs\" .pages ‚à© collections \"publishing\" .pages, \"Advanced Widgets\" collections \"docs\" .pages ‚à© collections \"advanced\" .pages ‚à© collections \"widgets\" .pages, \"Advanced Internals\" collections \"docs\" .pages ‚à© collections \"advanced\" .pages ‚à© collections \"internals\" .pages, , \"examples\" \"Getting started\" collections \"examples\" .pages, , "},{"url":"en/docs/AbstractPlutoDingetjes/","title":"AbstractPlutoDingetjes.jl ‚Äì develop enhanced Pluto widgets","tags":["docs","widgets","AbstractPlutoDingetjes","advanced"],"text":" A Pluto.jl notebook v0.19.40 frontmatter image \"https media.giphy.com media l3vRfDn9ca5PVkHv2 giphy.gif\" title \"AbstractPlutoDingetjes.jl ‚Äì develop enhanced Pluto widgets\" layout \"layout.jlhtml\" tags \"docs\", \"widgets\", \"AbstractPlutoDingetjes\", \"advanced\" date \"2023 11 21\" description \"AbstractPlutoDingetjes allows you to write more advanced widgets to be used inside Pluto.jl.\" license \"Unlicense\" frontmatter.author name \"Pluto.jl\" url \"https github.com JuliaPluto\" using Markdown using InteractiveUtils using AbstractPlutoDingetjes md\"\"\" AbstractPlutoDingetjes.jl If you want to design widgets to be used inside Pluto.jl like PlutoUI components, a plotting package, etc , AbstractPlutoDingetjes lets you hook into more advanced Pluto features. This package works best in combination with HypertextLiteral.jl https github.com JuliaPluto HypertextLiteral.jl . If you don't know about HypertextLiteral.jl yet, you should check out the overview of Pluto widgets https plutojl.org en docs advanced widgets first. \"\"\" Docs.Binding AbstractPlutoDingetjes, AbstractPlutoDingetjes md\"\"\" https media.giphy.com media l3vRfDn9ca5PVkHv2 giphy.gif \"\"\" md\"\"\" AbstractPlutoDingetjes.Bonds \"\"\" Docs.Binding AbstractPlutoDingetjes.Bonds, initial value Docs.Binding AbstractPlutoDingetjes.Bonds, transform value Docs.Binding AbstractPlutoDingetjes.Bonds, possible values Docs.Binding AbstractPlutoDingetjes.Bonds, NotGiven Docs.Binding AbstractPlutoDingetjes.Bonds, InfinitePossibilities Docs.Binding AbstractPlutoDingetjes.Bonds, validate value md\"\"\" AbstractPlutoDingetjes.Display \"\"\" Docs.Binding AbstractPlutoDingetjes.Display, published to js Docs.Binding AbstractPlutoDingetjes.Display, with js link md\"\"\" Extras \"\"\" Docs.Binding AbstractPlutoDingetjes, is supported by display Docs.Binding AbstractPlutoDingetjes, is inside pluto import PlutoUI PlutoUI.TableOfContents include definitions true pkgversion AbstractPlutoDingetjes "},{"url":"en/docs/ExpressionExplorer/","title":"ExpressionExplorer.jl ‚Äì documentation ","tags":["docs","internals","reactivity","advanced","ExpressionExplorer"],"text":" A Pluto.jl notebook v0.19.41 frontmatter image \"https media.giphy.com media 242BaXJnCfe7hOVrsE giphy.gif\" title \"ExpressionExplorer.jl ‚Äì documentation \" layout \"layout.jlhtml\" license \"MIT\" description \"Find all variables referenced and assigned in a Julia expression. Used internally by Pluto.jl.\" tags \"docs\", \"internals\", \"reactivity\", \"advanced\", \"ExpressionExplorer\" date \"2023 10 31\" frontmatter.author name \"Pluto.jl\" url \"https github.com JuliaPluto\" using Markdown using InteractiveUtils using PlutoUI TableOfContents using ExpressionExplorer Markdown.parse read joinpath pkgdir ExpressionExplorer , \"README.md\" , String "},{"url":"en/docs/PlutoDependencyExplorer/","title":"PlutoDependencyExplorer.jl ‚Äì documentation","tags":["docs","PlutoDependencyExplorer","internals","reactivity","ExpressionExplorer","advanced"],"text":" A Pluto.jl notebook v0.20.3 frontmatter image \"https media.giphy.com media 242BaXJnCfe7hOVrsE giphy.gif\" title \"PlutoDependencyExplorer.jl ‚Äì documentation\" date \"2024 01 21\" license \"Unlicense\" description \"Given a list of cell codes, PlutoDependencyExplorer can tell you in which order these cells should run. Used internally by Pluto.jl.\" tags \"docs\", \"PlutoDependencyExplorer\", \"internals\", \"reactivity\", \"ExpressionExplorer\", \"advanced\" layout \"layout.jlhtml\" frontmatter.author name \"Pluto.jl\" url \"https github.com JuliaPluto\" using Markdown using InteractiveUtils using PlutoDependencyExplorer using PlutoUI TableOfContents include definitions true md\"\"\" PlutoDependencyExplorer.jl \"\"\" Docs.Binding PlutoDependencyExplorer, PlutoDependencyExplorer md\"\"\" Basic example Let's define our \"notebook\", which is just a list of cells \"\"\" const PDE PlutoDependencyExplorer struct SimpleCell PDE.AbstractCell code end notebook SimpleCell. \"x y\" \"x 1\" \"y x 2\" md\"\"\" Next, we want to calculate its toplogy , this is the dependency graph of the notebook all links between cells. \"\"\" empty topology PDE.NotebookTopology SimpleCell topology PDE.updated topology empty topology, notebook, notebook get code str c c.code, get code expr c Meta.parse c.code , md\"\"\" info When reading this notebook, you can click on the data structures in the cells above to expand their tree viewer \"\"\" md\"\"\" Now that we have the topology, we can order cells in the topology. \"\"\" order PDE.topological order topology md\"\"\" The result contains an ordered list of the notebook cells \"\"\" order.runnable md\"\"\" You can also ask PlutoDependencyExplorer which cells should run if one cell re runs. This is a recursive search. For example, if I re run the cell that defines `y` \"\"\" notebook 3 PDE.topological order topology, notebook 3 .runnable md\"\"\" By the way, you can also ask PlutoDependencyExplorer which cell defines `y` \"\"\" PDE.where assigned topology, Set y md\"\"\" Core concepts Let's dig deeper into the Basic example above. The first thing we did was define our own subtype of `PlutoDependencyExplorer.AbstractCell`. \"\"\" Docs.Binding PDE, AbstractCell md\"\"\" Next, we calculated the notebook's topology , which stored as a `NotebookTopology`. \"\"\" Docs.Binding PDE, NotebookTopology md\"\"\" We calculated the topology by first creating an empty one, and then updating it with all the cells in our notebook. `NotebookTopology`s are always created by updating a previous one. This is done with `updated topology` \"\"\" Docs.Binding PDE, updated topology md\"\"\" info For the initial topology calculation in our example, we passed `notebook` as `notebook cells`, but also as `updated cells`. This tells `updated topology` that all cells are new. \"\"\" md\"\"\" When the notebook is changed later, you can use `updated topology` to calculate a new topology, which will use the old topology as a cache for cells that were not updated. \"\"\" md\"\"\" More API The following API is public, and covered by our semver vesrion numbering. These functions are used by Pluto and can be used by other packages , but might not be fully documented. We currently don't have the capacity https opencollective.com julialang projects juliapluto to document everything, but you can always take a look at Pluto's source for an example of how these functions are used, or you can contact us. \"\"\" md\" More basics\" Docs.Binding PDE, where assigned Docs.Binding PDE, where referenced Docs.Binding PDE, all cells md\" Disabled & resolved\" Docs.Binding PDE, is disabled Docs.Binding PDE, is resolved Docs.Binding PDE, set unresolved md\" Misc\" Docs.Binding PDE, exclude roots Docs.Binding PDE, is soft edge md\"\"\" PlutoDependencyExplorer defines an additional method for `ExpressionExplorer.external package names` \"\"\" Docs.Binding PDE.ExpressionExplorer, external package names md\" Cell precedence heuristic\" Docs.Binding PDE, cell precedence heuristic Docs.Binding PDE, DEFAULT PRECEDENCE HEURISTIC md\"\"\" Reactivity error types These types are possible value types of the `TopologicalOrder.errable` field. \"\"\" Docs.Binding PDE, ReactivityError Docs.Binding PDE, CyclicReferenceError Docs.Binding PDE, MultipleDefinitionsError md\"\"\" Data structures We defined immutable versions of some core data structures. \"\"\" Docs.Binding PDE, ImmutableDefaultDict Docs.Binding PDE, ImmutableSet Docs.Binding PDE, ImmutableVector Docs.Binding PDE, setdiffkeys Docs.Binding PDE, delete unsafe md\"\"\" ExpressionExplorerExtras These are some things that are too Pluto specific to go into ExpressionExplorer.jl, but are available through PDE as public API in the submodule `ExpressionExplorerExtras`. \"\"\" const EEE PlutoDependencyExplorer.ExpressionExplorerExtras Docs.Binding EEE, ExpressionExplorerExtras Docs.Binding EEE, can be function wrapped Docs.Binding EEE, can macroexpand Docs.Binding EEE, can macroexpand no bind Docs.Binding EEE, collect implicit usings Docs.Binding EEE, maybe macroexpand pluto Docs.Binding EEE, pretransform pluto pkgversion PlutoDependencyExplorer "},{"url":"en/docs/PlutoPages/","title":"üèóÔ∏è PlutoPages.jl","tags":["docs","publishing","PlutoPages","share","web","static"],"text":"PlutoPages.jl (advanced)PlutoPages.jl is a Static Site Generator designed to work well with Pluto notebooks. It‚Äôs a tool that turns a folder of files (Pluto notebook, Markdown files, images, and more) into a complete static website, that you can host using a service like GitHub Pages or Netlify. It is heavily inspired by Eleventy, so you can also read their documentation to understand the concepts better.PlutoPages allows for more complex sites than PlutoSliderServer.jl, since it is a full-fledged static site generator. Compared to Eleventy, it has direct support for Pluto notebooks (and their frontmatter). This means that you can easily build things like the sidebar on the left (which is generated from frontmatter fields title, tags and order).Check out the PlutoPages.jl README to get started.Combination with PlutoSliderServer.jlYou can combine PlutoPages.jl with PlutoSliderServer.jl to add interactivity to your website. The idea is as follows:Set up a PlutoSliderServer.jl instance that runs all notebooks in the src/ folder. Serve it on a domain, like plutosliderserver.my-site.org.Set up PlutoPages.jl to generate a static website from the src/ folder in a GitHub action. Publish the site with GitHub pages or Netlify, e.g. my-site.org.Link the two together using PlutoDeployment.toml: add the line slider_server_url = \"https://plutosliderserver.my-site.org\". Now your website will regenerate, and the PlutoPages.jl output will be set to use the slider server for interactivity.Who uses PlutoPages.jl?PlutoPages is relatively new (2023). It is being used in the following places:This website!The course Computational Thinking at MIT(WIP) The repository computational-thinking-template"},{"url":"en/docs/PlutoSliderServer/","title":"üí´ PlutoSliderServer.jl","tags":["docs","publishing","PlutoSliderServer","share","web","interactivity"],"text":"PlutoSliderServer.jlPluto notebooks can be made interactive, using the @bind macro. However, when you export your notebook to a file, the @bind interactions do not work. This is because @bind requires a running Julia process to work. Every time that you move a slider or click a button, a Julia process needs to calculate the new reactive values.So how do you get live interactivity on your website? You could run a public Pluto.jl server that runs the notebook, but this has a couple of problems: when someone edits the notebook, all future visitors will see these updates ‚Äì¬†it will quickly stop working. That‚Äôs not what we want! You could start a new Pluto session for every visitor (like binder), but this means that every visitor needs to wait for the notebook to load, since Julia is quite slow.üëâ This is where PlutoSliderServer.jl comes in. It is a web server that runs Pluto notebooks, and it can only calculate changes from @bind updates, code changes are not supported. This, together with some other tricks, means that every visitor gets their own isolated experience, but without the need to start a new Julia process for every visitor.PlutoSliderServer in practicePlutoSliderServer.jl is a web server that serves @bind interactivity for one or multiple Pluto notebooks. The typical setup is:You have a GitHub repository with your Pluto notebooks.You rent a Linux server from a provider (like hetzner, digitalocean, gcp, aws, etc.), from your university (SURF Research Cloud in Netherland), or you have a computer that you can leave running. (It is important that this is a isolated environment, without personal data. PlutoSliderServer.jl is not designed to be secure, and you should assume that visitors can execute code on your server.)You set up PlutoSliderServer.jl using our guide, with auto-git watching enabled.Now, you have a website with your notebooks, and all @bind interactivity will work. When you push changess to the notebooks in your GitHub repository, the website will automatically update.Try it outIt is easy to try out PlutoSliderServer.jl on your own computer. If you have a notebook file ready, just run:import PlutoSliderServer\n# fill in your own notebook path here!\npath_to_notebook = download(\"https://raw.githubusercontent.com/JuliaPluto/featured/50205f3/src/basic/turtles-art.jl\")\nPlutoSliderServer.run_notebook(path_to_notebook)\nHow does it work?Take a look at the PlutoSliderServer.jl README or documentation for more details.Who uses PlutoSliderServer.jl?PlutoSliderServer is used by various groups and universities since 2020.The Pluto developers use PlutoSliderServer for:The featured notebooks on featured.plutojl.orgThe course BMLIP at TU EindhovenThe course Computational Thinking at MITHelp and supportIf you have any questions, or you want help setting up PlutoSliderServer.jl, please reach out in all the usual Pluto channels! (Julia Discourse, Julia Slack, Julia Zulip, GitHub issues, etc.)."},{"url":"en/docs/advanced-widgets/","title":"Advanced widgets ‚Äì overview","tags":["docs","advanced","widgets","AbstractPlutoDingetjes","JavaScript"],"text":" A Pluto.jl notebook v0.19.42 frontmatter image \"https github.com fonsp Pluto.jl assets 6933510 0a27e62f 6ef1 4f13 b47c 2a2cefa8850a\" order \"0\" title \"Advanced widgets ‚Äì overview\" date \"2024 04 22\" tags \"docs\", \"advanced\", \"widgets\", \"AbstractPlutoDingetjes\", \"JavaScript\" description \"Pluto provides a framework for advances input and display widgets.\" layout \"layout.jlhtml\" license \"Unlicense\" frontmatter.author name \"Pluto.jl\" url \"https github.com JuliaPluto\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end using HypertextLiteral using PlutoUI md\"\"\" Developing advanced widgets for Pluto Pluto has a number of advanced features for developers who want to create complex widgets for Pluto. Let's define some categories Custom inputs widgets that are used with ` bind`, like a slider or a map location picker. Custom outputs for visualising results, like a plot or a map with labels. \"\"\" TableOfContents include definitions true md\"\"\" Custom input PlutoUI.jl provides some basic inputs, like sliders, textfields and more. But you can also make your own specialised widget For example, you could make a map location picker https github.com lukavdplas PlutoMapPicker.jl , showing a map, and giving back the clicked coordinate with ` bind`. screenshot https github.com lukavdplas PlutoMapPicker.jl raw main screenshot.png chemical equation builder https youtu.be lNbU5jNp67s?t 1546 , giving back a `Catalyst.ReactionSystem` with ` bind`. screenshot https github.com fonsp Pluto.jl assets 6933510 0a27e62f 6ef1 4f13 b47c 2a2cefa8850a widget composed with Markdown and PlutoUI, giving back 4 values in a tuple with ` bind`. screenshot https user images.githubusercontent.com 6933510 145588612 14824654 5c73 45f8 983c 8913c7101a78.png \"\"\" md\"\"\" No JavaScript Composing widgets Some widgets can be written as a combination of existing inputs, and static content like text, styles, layout and images. This means that you can make simple widgets using only Julia and HTML or Markdown, without JavaScript. For this, you can use `PlutoUI.combine` combine `PlutoUI.Experimental.transformed value` transformed value In some cases, you might just want to \"wrap\" and existing widget in static content `PlutoUI.Experimental.wrapped` wrapped Widgets created with these methods can be published in a package \"\"\" Docs.Binding PlutoUI, combine Docs.Binding PlutoUI.Experimental, transformed value Docs.Binding PlutoUI.Experimental, wrapped md\"\"\" Custom inputs with JavaScript The Pluto developers üíñüíñüíñ love JavaScript And Pluto also provides a first class framework for writing widgets using JavaScript. Preliminary writing JavaScript Before reading further, make sure that you understand the basics of writing JavaScript inside Pluto, and that you know how to debug the web using the DevTools of your favourite browser. To learn more, take a look at the featured notebooks https featured.plutojl.org about \"Pluto and the Web\", and read the documentation about our JavaScript API https plutojl.org en docs javascript api . Preliminary `type show htl` Here is the core recipe to use when writing your own widgets 1. Define a type 2. Define a `Base.show` method for HTML 3. Use `HypertextLiteral. htl` to write your widget, using the `io` from `show`. This should be the minimal template for every widget that you write. ```julia import HypertextLiteral htl begin struct MyCoolSlider min Real max Real end function Base.show io IO, m MIME\"text html\", d MyCoolSlider show io, m, htl \"\\\"\" input type range min d.min max d.max \"\"\\\" end end ``` ```julia use it like so bind value MyCoolSlider 5, 10 ``` Let's see it in action \"\"\" import HypertextLiteral htl begin struct MyCoolSlider min Real max Real end function Base.show io IO, m MIME\"text html\", d MyCoolSlider show io, m, htl \"\"\" input type range min d.min max d.max \"\"\" end end bind value MyCoolSlider 5, 10 value md\"\"\" It works Pluto renders your widget by calling the `Base.show` method, and displaying that in the page , it then finds the first element ` input ... ` . Pluto adds an event listener to the `\"input\"` event, and when fired or when first rendered , Pluto takes the `.value` property, sends it to Julia, and it becomes your bound variable. \"\"\" md\"\"\" Core concepts `currentScript`, `value`, input event The widget above `MyCoolSlider` works because the `input` element fires an `\"input\"` event when moved, and it has a `.value` property. This is true for all the built in ` input ... ` elements https developer.mozilla.org en US docs Web HTML Element input . Now... when writing your own inputs, you need to fake it Set the `.value` property from JavaScript, and fire an `\"input\"` event. To select the element, `currentScript` is special API added by Pluto, it refers to the ` script ` element that your code is written in. In the example below, our custom input element is a wrapper ` div `, and we use JavaScript to select it with `currentScript.parentElement`, to set its `value` and to fire the `\"input\"` event. üëâ Can you find this in the code? \"\"\" begin struct RectangleDrawing end function Base.show io IO, m MIME\"text html\", rd RectangleDrawing Base.show io, m, htl \"\"\" div canvas width \"200\" height \"200\" style \"position relative\" canvas script üê∏ `currentScript` is the current script tag we use it to select elements üê∏ const div currentScript.parentElement const canvas div.querySelector \"canvas\" const ctx canvas.getContext \"2d\" var startX 80 var startY 40 function onmove e üê∏ We send the value back to Julia üê∏ div.value e.layerX startX, e.layerY startY div.dispatchEvent new CustomEvent \"input\" ctx.fillStyle ' ffecec' ctx.fillRect 0, 0, 200, 200 ctx.fillStyle ' 3f3d6d' ctx.fillRect startX, startY, ...div.value canvas.onpointerdown e startX e.layerX startY e.layerY canvas.onpointermove onmove canvas.onpointerup e canvas.onpointermove null Fire a fake pointermoveevent to show something onmove layerX 130, layerY 160 script div \"\"\" end end md\"\"\" Try dragging a rectangle in the box below \"\"\" bind dims RectangleDrawing dims md\"\"\" Custom output Pluto can be used as a framework to have high quality widgets powered by JavaScript, displaying data and calculations from Julia. By creating a Custom output , you can wrap your JavaScript powered widget into a Julia function, such as `plot data `. Techniques used to power Custom Outputs can also be used in Custom Inputs A Custom Input is just a Custom Output with added ` bind` support. \"\"\" md\"\"\" Core principle a visualiser function TODO \"\"\" md\"\"\" Julia only Layout You can use `PlutoUI.ExperimentalLayout` to display objects in columns, grids, and more. This lets you put plots next to sliders, text and more. \"\"\" PlutoUI.ExperimentalLayout.grid md\" Layout demo \" Text \"\" Text \"I'm on the left\" Dict a 1, b 2,3 md\"\"\" Combining bonds and outputs When you want to put a bond and an output in the same cell like a slider next to a plot , you need to take special care. You need to define the bond in a separate cell , like so \"\"\" bond bind val Slider 1 20 PlutoUI.ExperimentalLayout.hbox bond, collect 1 val md\"\"\" Special features Using `PlutoUI.ExperimentalLayout` has some special advantages over using ` htl` or another HMTL based method to create layout Pluto treats each item as its own display. So a 2x2 `grid` will act like 4 individual Pluto cells arranged in a grid. In particular, if some of the items in a layout change, then only those items will be re rendered. Items that stayed the same will be unaffected. For bonds, this means that they will not re render and get reset to their initial value. When using HTML and JavaScript, this means that if your `Base.show` method returns exactly the same value, the re render will not be trigger, and ` script `s don't execute again. \"\"\" md\"\"\" HTML HypertextLiteral and alternatives You can achieve the best results when using HTML, CSS and JavaScript to power your widgets. This gives you full control over appearance and behaviour. To use HTML inside a `Base.show` function, we highly recommend ` htl` from HypertextLiteral.jl https github.com JuliaPluto HypertextLiteral.jl , a package developed in collaboration with the Pluto developers, but also useful outside of Pluto. It's a small dependency, and it gives optimal performance. Another option is HyperScript.jl https github.com JuliaWeb Hyperscript.jl , which provides a \"Julia API to HTML\", whereas HypertextLiteral is closer to HTML itself. You could also use no package, and use `write io, \" div ...\" ` calls to output HTML without a package. For small widgets this will work well, but we would recommend starting with HypertextLiteral give more flexibility later, with little cost. \"\"\" function emoji list xs Vector Integer htl \"\"\" ol htl \" li repeat \"üå∏\",x li \" for x in xs ol \"\"\" end emoji list 5,10,3,2,1 html\"\"\" a href \"https github.com JuliaPluto HypertextLiteral.jl\" class \"arrow\" Learn more HypertextLiteral.jl a \"\"\" md\"\"\" JavaScript API ` script ` tags included in HTML output will be executed by Pluto, and you can use this to make interactive and dynamic widgets In your code, you will mostly be using Web APIs your code runs directly in the browser , like DOM manipulation. Use javascript.info https javascript.info or MDN https developer.mozilla.org to learn more about Web APIs. You can also import JavaScript libraries and frameworks and use them in your widget. We think the Web APIs and modern JavaScript are very powerful, and you should be able to do anything you want However, we decided to add a small amount of extra functionality to make it easier to write code specifically for Pluto outputs. \"\"\" html\"\"\" a href \"https plutojl.org en docs javascript api \" class \"arrow\" Learn more JavaScript API a \"\"\" md\"\"\" `AbstractPlutoDingetjes.jl` We recommend reading the docs of `AbstractPlutoDingetjes` https plutojl.org en docs abstractplutodingetjes , containing special API that we offer on top of the Web platform. In particular, I want to highlight two functions for special data needs Use `AbstractPlutoDingetjes.Display.published to js` when visualising a large amount of data using JavaScript, and just interpolating the data into a ` script ` in an `HypertextLiteral. htl` expression is not performant enough. ```julia HypertextLiteral. htl \"\"\\\" script the standard way, fast for small amounts of data let x \\ my vector this is faster for large data let y \\ AbstractPlutoDingetjes.Display.published to js my big vector script \"\\\"\" ``` \"\"\" md\"\"\" Use `AbstractPlutoDingetjes.Display.with js link` when you want to make on demand requests to Julia from your JavaScript code. \"\"\" md\"\"\" If you create a widget with HTML JS for multiple environments VS Code, Jupyter, Documenter, Franklin, Bonito, Genie, etc , it can be useful to check whether the widget is being displayed in Pluto or not. We recommend performing this check inside the `Base.show io IO, m MIME\"text html\", ... ` method, using like `is inside pluto io IO ` to check for Pluto, or `is supported by display` to check for a specific Pluto feature. \"\"\" html\"\"\" a href \"https plutojl.org en docs abstractplutodingetjes \" class \"arrow\" Find more in the AbstractPlutoDingetjes docs a \"\"\" md\"\"\" Distributing widgets Once you created a cool widget, the most user friendly way to distribute it is to publish it in a package . You can create a new package with your widget, or you can add it to an existing package. Dependencies When distributing a widget in a package ExampleWidget.jl , you do not need to add Pluto.jl as a dependency to your Project.toml. You just need to add the packages that you used. This could be HypertextLiteral.jl or AbstractPlutoDingetjes.jl. If you used `combine` or another PlutoUI feature, you add PlutoUI.jl as a dependency. HypertextLiteral.jl and especially AbstractPlutoDingetjes.jl are very small dependencies and will not add any noticeable lag to your package installation. Code in notebook or Julia file? When prototyping your widget, you probably want to work fully inside a notebook. Tip when editing the notebook, copy the `localhost` URL and open it in a second window. That way you can see the code and widget side by side. Once you're done, you have two options for moving it to a package. First, you could store your notebook file directly in the package source code. Use the \"Disable in File\" feature to disable cells where you test your widget. https github.com JuliaPluto AbstractPlutoDingetjes.jl assets 6933510 f96980ff 83ce 4b15 8897 dc3e3b1ba72e Second, you could move your code to a classic `.jl` file. Then you could use Revise.jl or ` revise` from PlutoLinks.jl https github.com JuliaPluto PlutoLinks.jl to test it in a notebook while developing the widget. This option might be nicer if your widget has a lot of JavaScript code. Publishing small packages? If you just created one cool widget, you might think \"I want to publish this, but it's too small for a package \". Here is a little political message from fons do it anyways Life is too short to not publish small packages If you made something fun or valuable, you totally deserve to publish it and share it with others. üíõ It's really valuable for others, and a cool experience for you Publishing a widget in a small package is really valuable Others can use it by simply typing `import ExampleWidget` in a notebook . Without publishing it on General, users need to download scripts, copy code, ... This creates lots of hard to reproduce notebooks Once it's on the registry, it's easier for people to discover Especially if the name starts with `Pluto`, like PlutoMapPicker.jl. People searching for your widget can find it online, because registered package show up on juliahub.com and more. It's easy to get feedback, bug reports and contributions from users. And you can easily make patches and release them to your users. Or maybe it was right from the start, and you don't need this \"\"\" demo img let url \"https user images.githubusercontent.com 6933510 116753174 fa40ab80 aa06 11eb 94d7 88f4171970b2.jpeg\" data read download url PlutoUI.Show MIME\"image jpg\" , data end demo html htl \" b style 'font family cursive ' Hello b \" md\"\"\" Embeddable output Pluto has a multimedia object viewer, which is used to display the result of a cell's output. Depending on the type of the resulting object, the richest possible viewer is used. This includes an interactive structure viewer for arrays, tables, dictionaries and more embed display 1,2, a 3, b 4 an ` img ` tag with optimized data transfer for images embed display demo img raw HTML for HTML showable objects embed display demo html Normally, you get this object viewer for the output of a cell. However, as demonstrated in the list above, you can also embed Pluto's object viewer in your own HTML . To do so, Pluto provides a function ```julia embed display x ``` Example As an example, here is how you display two arrays side by side ```julia htl \"\\\"\" div style \"display flex \" embed display rand 4 embed display rand 4 div \"\\\"\" ``` Currently, you use this function with `PlutoRunner.embed display` or just `embed display`. In the future, this will be `AbstractPlutoDingetjes.Display.embed display`, please comment this PR https github.com JuliaPluto AbstractPlutoDingetjes.jl pull 9 if you want it You can learn more https github.com fonsp Pluto.jl pull 1126 about how this feature works, or how to use it inside packages. \"\"\" import AbstractPlutoDingetjes Docs.Binding AbstractPlutoDingetjes.Display, published to js Docs.Binding AbstractPlutoDingetjes.Display, with js link Docs.Binding AbstractPlutoDingetjes, is inside pluto Docs.Binding AbstractPlutoDingetjes, is supported by display "},{"url":"en/docs/ai-editor-features/","title":"‚ú® AI features","tags":["docs","editor"],"text":"Automatic syntax fixesPluto can help you fix syntax errors automatically! If you make a typo or your code doesn‚Äôt parse, Pluto will offer a button to fix it for you automatically, powered by a cloud AI model.üö® Experimental! This feature is available in Pluto v0.20.8 and above. See the announcement PR for more details.How to use itWhen you hit a syntax error (e.g. missing end, typo in a function name), Pluto shows a button: ‚ÄúFix with AI‚Äù.Click the button, and you‚Äôll see a prompt explaining what will happen, and you can choose whether you want to use the service.If you accept, Pluto will use a cloud AI model (currently Claude 3.5 haiku) to fix the error, and the cell will be updated with the new code.PrivacyThe first time that you use the feature, Pluto will show a message explaining the current privacy policy of the feature. This might change over time, so check Pluto for the current information. (If the privacy policy changes in the future, you will be asked to accept the new policy.)The feature currently works without sign-in: you can use the feature directly in Pluto without creating an account.FeedbackDoes this not work for you? Or do you have other feedback? Use the built-in feedback form in Pluto, or let us know on GitHub.(beta) AI Prompt generationWe notice that people often use Pluto side-by-side with other AI chat systems, like chatgpt.com or claude.ai. This feature will make that workflow more effective!There is a button to generate a prompt about a cell with context from your notebook. When you ask a question like ‚ÄúWhat does this code do?‚Äù or ‚ÄúHelp me add a linear trendline‚Äù, it helps to tell the AI model not just the code, but also code from other cells, packages, current output, etc. The prompt generation will automatically add the relevant context to the prompt, so you can get better answers from AI models.Here is a video of the feature in action:üö® Experimental! This feature is available in Pluto v0.20.9 and above, and is currently in beta. See the announcement PR for more details.How to use itIn any cell in your notebook, click the cell context menu in the top right of the cell TODO ICON, and click ‚ÄúAsk AI‚Äù. This will open the prompt generation UI.Now you see the prompt generation UI. If you want, you can type a question that is added to the prompt. When you press Enter or click the ‚ÄúCopy‚Äù button, the prompt is copied to your clipboard. You can paste it into an AI chat on another website, like chatgpt.com or claude.ai.How does it work?The prompt is auto-generated based on notebook context. Pluto uses cell inputs, some cell outputs, package information and the reactive dependency graph to generate a prompt. The important feature is that the reactive dependency graph is used to determine which cells are relevant to the current cell.The prompt contains XML tags like <pluto-ai-context-current-cell>. These tags are completely made up, but they help AI models understand the structure of the generated prompt.Try it out on a complicated notebook, and take a look at the generated prompt.Token limitMost AI chat systems have a token limit, which limits the length of the prompt. Pluto will try to generate the best possible prompt that fits within a fixed token limit (currently 3000 tokens). If the token limit is reached, less context will be provided.PrivacyThis feature does not use any LLMs or other web services, it just generates a prompt that you can use as you wish.FeedbackDoes this not work for you? Or do you have other feedback? Use the built-in feedback form in Pluto, or let us know on GitHub.ConfigurationYou can enable or disable Pluto‚Äôs AI features with the enable_ai_editor_features setting. To turn off all features, set it to false:Pluto.run(enable_ai_editor_features=false)\nChatGPT block detectionSome AI features will be disabled automatically if Pluto detects that ChatGPT is blocked on your network.This is for universities/workplaces that don‚Äôt allow LLM tools as a policy. If this university has already blocked the chat.openai.com (ChatGPT) domain, then Pluto will ‚Äúgo with the flow‚Äù and also not offer the AI service. (We check ChatGPT regardless of which LLM is used by Pluto.)More infoBlocking AI features in your courseAre you a teacher who wants to block AI features in your course? You have the following options:Ask your students to start Pluto with Pluto.run(enable_ai_editor_features=false).Ask the system administrator to block ChatGPT: chat.openai.comDoes this not work for you? Or do you have other feedback? Let us know on GitHub, or send Fons an email!"},{"url":"en/docs/binder/","title":"ü§π Binder","tags":["docs","publishing","binder","share","web","static"],"text":"BinderPluto notebooks can be run in Binder, an awesome service that allows you to run scientific computational notebooks in the cloud. This service is really useful for science accessibility, and for promoting reproducibility.Different from JupyterUsing Binder with Pluto is a bit different from using it with Jupyter and other languages. This is because Binder is designed directly for Jupyter, and it needs some convincing to serve Pluto notebooks instead. The setup is also different ‚Äì¬†instead of creating a repository on GitHub for your Binder project, we already created one repository for everyone (fonsp/pluto-on-binder), and Binder is built-in to all Pluto notebook exports.Binder for your notebooksThis is really simple! Just create an HTML export of your notebook, that‚Äôs it! Each export from Pluto binder functionality built-in, without additional setup.When you view an HTML export from Pluto (like this featured notebook), you will see a button in the top right corner that says ‚ÄúEdit or run‚Äù. Clicking this will open a new popup with the options for running the notebook. You can either download the notebook file and run it locally with Pluto, or run the notebook with Binder, directly in your browser.When you share your notebook file (e.g. with pluto.land), this button is also visible, and people can run the notebook with binder.Launch timeWe have created a Binder image that is optimized to launch Pluto as fast as possible. Yet, it can still take a while to run your notebook, because packages from the notebook need to be installed and precompiled. In some cases, the launch may even fail because the precompilation uses too much memory.We think it might be possible to improve this by creating a custom Binder image that is optimized for your notebook, by installing and precompiling the notebook packages during the binder build process, so that they are ready to be loaded when the binder image is launched. If you‚Äôre interested in helping us with this, please reach out!Use Binder to try out PlutoYou can also use Binder to try out Pluto.jl. Go to plutojl.org/#try to get started."},{"url":"en/docs/configuration/","title":"‚öôÔ∏è Configuring Pluto","tags":["docs","editor","configuration"],"text":" A Pluto.jl notebook v0.20.3 frontmatter title \"‚öôÔ∏è Configuring Pluto\" date \"2025 06 20\" tags \"docs\", \"editor\", \"configuration\" description \"How to change settings of the Pluto.jl Julia notebook\" layout \"layout.jlhtml\" order 99 license \"MIT\" frontmatter.author name \"Pluto.jl\" url \"https github.com JuliaPluto\" using Markdown using InteractiveUtils begin import Pkg pde joinpath pwd , \"..\", \"..\", \"..\", \"pluto deployment environment\" if isdir pde Pkg.activate pde, io devnull Pkg.instantiate io devnull else warn \"Notebook launched outside of plutojl.org website repository... Installing Pluto from registry.\" Pkg.activate temp true Pkg.add \"Pluto\", \"PlutoUI\" end import Pluto, PlutoUI using HypertextLiteral end PlutoUI.TableOfContents include definitions true md\"\"\" Configuring Pluto In Pluto's design, we always try our best to make choices that work best for our audience, rather than adding more settings. We do this to make Pluto less intimidating to use for newcomers, and to avoid situations where issues are caused by a \"wrong configuration\". However, there are some settings intended for system administrators e.g. running a Pluto server for your students , and for advanced Julia users . These settings are mostly about the \"backend\" everything you don't see . We intentionally don't have settings for the \"frontend\" the GUI interface where you type code and see results . Such settings are usually more difficult to implement and maintain. In some cases, we also want to create a homogenous experience a notebook should look the same on different computers. The best configuration We thought long and hard to find the best default configuration. To get the best Pluto experience, don't change these settings . A custom experience You can achieve a lot of customisability by writing special code Take a look at PlutoLinks.jl https github.com JuliaPluto PlutoLinks.jl , PlutoHooks.jl https github.com JuliaPluto PlutoLinks.jl and AbstractPlutoDingetjes.jl https plutojl.org en docs abstractplutodingetjes . You can also use CSS e.g. with HypertextLiteral.jl https github.com JuliaPluto HypertextLiteral.jl to customise the look of a notebook. \"\"\" md\"\"\" How to use settings Option 1 `Pluto.run kwargs... ` The easiest way to configure Pluto is by providing keyword arguments to `Pluto.run`. For example, to configure the port used to run Pluto ```julia Pluto.run port 1235 ``` \"\"\" md\"\"\" Option 2 `Pluto.ServerSession` You can also create a session first, configure it, and then run a server on that session. ```julia session Pluto.ServerSession session.options.server.auto reload from file true session.options.compiler.optimize 0 Pluto.run session ``` \"\"\" htl \"\"\" ul map categories do c htl \" li a href string \" \", c c a li \" end ul \"\"\" begin categories CompilerOptions, ServerOptions, SecurityOptions, EvaluationOptions, end md\"\"\" Configuration options Pluto's settings are divided into length categories categories \"\"\" Docs.Binding Pluto.Configuration, categories 1 Docs.Binding Pluto.Configuration, categories 2 Docs.Binding Pluto.Configuration, categories 3 Docs.Binding Pluto.Configuration, categories 4 "},{"url":"en/docs/education/","title":"üéì Pluto for your course","tags":["docs","introduction","education"],"text":"Pluto for educationPluto.jl is a programming environment designed specifically for education! If you are planning to teach a scientific course, Pluto might be a good fit for you and your students. Pluto only works with Julia,Students and teachers are our primary target audience, and we are committed to We believe that there are enough ‚Äòadvanced‚Äô tools for advanced users, but that a lot can be done to make programming more accessible to beginners.How can you use Pluto for education?Here‚Äôs our evil plan to take over the world:We make programming and exploration easy ‚Äì¬†this makes it great for writing lectures notes. You can experiment with your idea, and when you‚Äôre done, you organize the code and add some text.Then we add interactivity in a very accessible way (easy, but not as flexible as some other tools) ‚Äì and you can write awesome lectures with sliders, buttons and animation!When it‚Äôs the students‚Äô turn to write code, we make Pluto as easy as possible to set up and use, with a coding experience that is designed specifically for users that are new to programming and Julia.Let‚Äôs look in more detail at writing lectures and assignments in Pluto.For lecturesPluto is great for writing lectures in the ‚ÄúPluto style‚Äù. This means lectures with:A modern look ‚Äì¬†lectures with simple markdown and plots should look great, with modern typography and design, on desktops, mobile phones and PDF.Interactive content ‚Äì sliders, scrubbable numbers, buttons and more, to control outputs like plots, numbers and tables.Reproducibility ‚Äì Pluto notebooks are easy to share, and anyone can open a notebook and run it themselves.And our goal is to make this as easy as possible to set up and use. This is how we do that:A modern look ‚Äì¬†Pluto is built on ‚Äúsmart defaults‚Äù. Instead of endless themes and settings pages, we have one modern design that is designed to look best on today‚Äôs web.Interactive content ‚Äì¬†Pluto uses reactivity to make everything interactive. We believe that reactive global variables are the most accessible way to make notebooks interactive. Interactive UI (sliders) works using the same mechanism (reactive globals), which means that anyone can learn how to use it. Pluto is not the most advanced interactivity tool for Julia, but it is the easiest to learn.Reproducibility ‚Äì¬†using reacitivity, a built-in package manager, binder and more, we try our best to make sure that Pluto notebooks are reproducible by default. Our hope is to make Julia notebooks just like Powerpoint, Photoshop and Excel files ‚Äì¬†you can open them, and they will work.ExamplesTo see examples of interactive lectures, take a look at the featured notebooks.For assignmentsWe also want people to learn by doing. There are several ways for students to get involved in the course by programming themselves. For example:Open assignments ‚Äì students can create a new notebook to solve a problem.Guided assignments ‚Äì¬†you can write a notebook with assignments, and let students fill in the gaps. Pluto is great for this! For some examples, take a look at the homeworks from Computational Thinking at MIT.Remixing lecture notes ‚Äì since Pluto notebooks are reproducible, students can easily run the lecture notes (on binder, or locally) and play around with the code.Guided assignmentsPluto is great for a style of assignment, which we will call ‚Äúguided assignments‚Äù.The idea is a notebook that contains:Text to explain the assignment.Cells with missing content, where students fill in their code.Cells that check the student‚Äôs answer, and give feedback.Bonus text and resources to explain more concepts. For example, you can add a foldable section that explains how parametric types work in Julia, for students who want to dive deeper.ExamplesFor some examples, take a look at the homeworks from Computational Thinking at MIT, in particular Homework 1 and Homework 3, which are also featured Pluto notebooks.JuliaCon talkJuliaCon 2021 presentation on using Pluto at MIT, with interactive lectures and guided assignments.PlutoSplitter.jlOne tool that may help you with guided assignments is PlutoSplitter.jl. This package lets you write a homework notebook with all the solutions already filled in, and then split it into two files: one with the solutions, and one with all answers removed. This lets you work on your answer-checking code easily, and then generate an assignment file for students.Why Julia for education?We believe that Julia is a great language for scientific education! Here are the main advantages from an educational perspective:Code as communication toolJulia has very expressive syntax, which can make your code look similar to the math or pseudocode that you use in your course. We think that (well-written) Julia code is relatively easy to understand by students and scientists, even if they don‚Äôt know Julia that well. Watch the TED talk by Alan Edelman about this topic.This is a core concept in Pluto ‚Äì you can use code to tell your story, and not just outputs from code (like plots and numbers). That‚Äôs why Pluto lets you decide for each cell whether to show the code or not.Easy access to core CS and math conceptsUnlike Python, R and JavaScript, Julia gives you direct access to core CS concepts like memory, pointers, bytecode, baremetal performance and more, if you want! And unlike C++ and Rust, you also don‚Äôt have to worry about these things. This means that you can teach your course in a high-level way (to cover many topics), and also touch upon core CS concepts in a lecture, without having to switch to a different language.Good way to learn PythonLet‚Äôs be honest, many students will complain that your course is not using Python. Well, learning Julia is also an excellent way to learn Python! Julia teaches core programming skills that are very transferrable to Python ‚Äì it‚Äôs not a waste of time. Even better, learning another language gives you a wider view of the programming landscape, which will help you be more creative.Connection to open source and the scientific communityThe Julia community is very open and welcoming, and Julia users are much more likely to contribute to open source projects than more established languages. This is a big advantage for students who are entering the scientific community, because Julia offers many opportunities to collaborate and get involved."},{"url":"en/docs/export-html/","title":"üìó Export to HTML","tags":["docs","publishing","html","file","export","share","web"],"text":"Export to HTML This is a snapshot of your notebook with all outputs in a standalone HTML file. You can share this .html file via email, and other people can double-click the file to read your notebook.InfoImportant: you can open an HTML export file on any computer, you do not need to have Julia or Pluto installed!For some examples of HTML export files, check out our featured notebooks.Step 1Open your notebook in Pluto, and wait for all cells to finish running.Step 2Press the Share button in the top right.Step 3Choose ‚ÄúStatic HMTL‚Äù.ReproducibilityWhat‚Äôs really cool about HTML export files is that they are reproducible: every HTML export file from Pluto includes the .jl source code! That means that someone who reads the notebook can also run the original code and make changes!Every HTML export contains an Edit or run button in the top right. When you press it, you see a screen where you can:Run the notebook with binder, a free service to run scientific notebooks in the cloud. This works on any browser (including mobile), without needing to install Julia or Pluto.Download the .jl notebook file that was used to generate the HTML export. You can open this file with Pluto..html files from Pluto can also be used as web pages on your blog. Learn more"},{"url":"en/docs/export-julia/","title":"üìó Export to Julia","tags":["docs","publishing","file","export","share","web"],"text":"Notebook file Pluto notebook files are stored as .jl Julia files. This file contains:Code for each cellSpecial comments (start with #) that Pluto uses to understand which code belongs to which cell.The exact version numbers of packages that were used. This is stored at the bottom of the .jl file, the Project.toml and Manifest.toml content.When you send your .jl notebook file to someone else, they can open the notebook in Pluto and see the same results. This concept is called reproducibility, and it is something we work very hard on at Pluto!Step 1Open your notebook in Pluto, and wait for all cells to finish running.Step 2Press the Share button in the top right.Step 3Choose ‚ÄúNotebook file‚Äù.InfoThe steps above are a quick way to get the .jl file. You can also Save your notebook on your computer by giving it a file name. In that case, the steps above just give a copy of your file.Notebooks as scripts.jl notebook files can also be run as a script. Since the .jl file just contains your cell code, you can also run it with Julia:> julia my_notebook.jl\nThe most useful application is to use include(\"my_notebook.jl\") in the REPL or a script to get variables from your notebook outside of Pluto."},{"url":"en/docs/export-pdf/","title":"üìó Export to PDF","tags":["docs","publishing","pdf","file","export","share","web"],"text":"Export to PDF If you want to print your notebook, or submit it as homework assignment, it might be useful to get a PDF file!When possible, we recommend sharing an HTML file instead of a PDF file. HTML files are great for reproducibility!Step 1Open your notebook in Pluto, and wait for all cells to finish running.Step 2Press the Share button in the top right.Step 3Choose ‚ÄúPDF‚Äù.Page layoutPluto tries to make your notebook look well on paper. One challenge is where to place ‚Äúpage breaks‚Äù. Our goal is:Don‚Äôt split cells between pages, unless necessary.Markdown headers should be at the top of a page.üå∏ If your notebook does not look good on PDF, generate an HTML export and send it to the Pluto developers! üå∏"},{"url":"en/docs/export-recording/","title":"üé• Recording ‚Äì experimental video mode","tags":["docs","publishing","recording","html","file","export","share","web"],"text":"Make a recording (preview)Pluto has one really cool experimental feature, and we‚Äôre curious what you think! You can make a Pluto recording, which is a bit like recording your screen to a video, but the result is an HTML web page!That means that while you watch the video, you can pause and scroll to a different section!Take a look at this example videoPlease try it out, and let us know what you think!Step 1Open your notebook in Pluto, and wait for all cells to finish running.Step 2Press the Share button in the top right.Step 3Choose ‚ÄúRecord‚Äù.Step 4Click to start a recording. You can choose between recording with microphone audio or without audio (screen only).Step 5You are now recording! You can:Interact with @bind elements and see your notebook update.Scroll through the notebook.Speak! Audio can be recorded.Make code changes (currently, individual keystrokes cannot be recorded, you need to run the cell to make changes show in the recording).Step 6When you are done, press ‚ÄúStop recording‚Äù. After a couple seconds, you can choose a location to store the .html file."},{"url":"en/docs/export/","title":"Export options ‚Äì¬†overview","tags":["docs","publishing","pdf","html","file","export","share","web"],"text":"How to export a Pluto.jl notebookAfter writing your Pluto notebook, you have a couple options to export your notebook, to share with someone else. The following options are available directly from the Pluto editor:Notebook file (.jl) ‚Äì This is how Pluto stores your notebook file, and you can share it directly with someone else so they can run your notebook.Static HTML ‚Äì A snapshot of your notebook with outputs in a versatile format.PDF ‚Äì A traditional PDF document for printing.Recording ‚Äì A special type of video!Press the Share button in the top right."},{"url":"en/docs/featured-notebooks/","title":"‚≠êÔ∏è Featured notebooks","tags":["docs","introduction"],"text":"‚≠êÔ∏è Featured notebooksCheck out some amazing Pluto notebooks created by the community! These notebooks are a good way to get started, and you can discover new things to do with Pluto.Browse featured notebooksSubmit your ownInterested in submitting one of your notebooks as a featured notebook?You don‚Äôt need to be an expert to write a featured notebook! The notebooks are designed to help beginning Pluto users get underway with their own ideas; as such, short tutorials on basic Julia concepts, or short examples of neat ideas, are very much welcome, and are a great way to contribute to the Julia community when you‚Äôre still learning yourself.That said, we also very much welcome experienced Julia programmers to share their work. Featured notebooks can highlight how you use Julia in your domain, bring attention to a neat package, or share exercises that you created for a course.Learn more"},{"url":"en/docs/files/","title":"üìÑ Create, open and save files","tags":["docs","file","navigation"],"text":"How to create a new notebook First, go to the Pluto main menu. Then, click the ‚ÄúNew‚Äù button. This will create a new empty notebook in the current Pluto session.TipYou can right click the ‚ÄúNew‚Äù button, and select ‚ÄúOpen in new tab‚Äù. This will open the new notebook in a new tab, and you can open more notebooks in parallel.How to save a notebook Notebooks are saved automatically when you run code. When you start typing new code in a cell, this code is not yet saved, but when you run the cell, the code is saved.When there are unsaved changes in a notebook, you will see a button in the top right corner of the notebook ‚Äì the ‚ÄúSave‚Äù button. Clicking this button will run all unsaved cells in one batch, which will automatically save the notebook.Notebook pathThe notebook is always stored somewhere on your computer as a .jl file. The path of the notebook is shown at the top of the notebook, and you can click on it to change the path. After typing a new path, click ‚Äú‚Äù So: to move the notebook to a different location or to change the filename, you can just change the path.When you create a new notebook, the notebook is stored temporarily in the ~/.julia/pluto_notebooks/ folder with a random name (something like Wild experiment 4.jl). This is a hidden folder, and we recommend saving your notebooks somewhere else (like your Documents folder) if you want to keep your work.The .jl extensionThe .jl extension is used because Pluto notebooks are valid Julia files ‚Äì¬†you can run them as Julia scripts, or use the include function in the REPL to start a REPL session with the notebook.You are free to use a different extension (like .plutojl), the extension is not required to open the file.How to open a notebook from your computer First, go to the Pluto main menu. Now you can type a notebook path in the textbox, and press Enter or click the ‚ÄúOpen‚Äù button. While you type, there will be autocompletion suggestions with folders and files.How to find the notebook pathWe need to know the absolute path of a .jl notebook file. Here‚Äôs how you do that in Windows. On MacOS, right click the notebook file in Finder, hold down option, and click ‚ÄúCopy ‚Ä¶ as pathname‚Äù. On Linux, right click and ‚ÄúCopy file path‚Äù.For example, you might have:C:\\Users\\fons\\Documents\\my_notebook.jl on Windows./Users/fons/Documents/my_notebook.jl on MacOS./home/fons/Documents/my_notebook.jl on Ubuntu.Why so difficult?It would be really nice if you could just pick the notebook file from your file browser, instead of having to type the path. But this is not possible, because Pluto is a web application, which does not have access to your file system for security reasons. See this issue andHow to open a notebook from the web First, go to the Pluto main menu. Now you can type a notebook path in the textbox, and press Enter or click the ‚ÄúOpen‚Äù button.The notebook will open in ‚ÄúSafe Preview‚Äù mode, which means that no code will be executed until you give permission.Open a notebook using the Clipboard You can copy the complete contents of a .jl Pluto notebook file, and open it with Pluto. With the contents of a notebook file in your clipboard, go to the Pluto main menu. Now simply paste the contents anywhere on the page using Ctrl+V or Cmd+V, and it will be opened as a new notebook.The notebook will open in ‚ÄúSafe Preview‚Äù mode, which means that no code will be executed until you give permission.Running featured notebooks On the bottom of the Pluto main menu, you will find a large collection of featured notebooks ‚Äì notebooks written by the Julia community, featured by the Pluto developers. These notebooks are a great resource to get inspired about new ways to use Julia and Pluto!Click on any featured notebook to read it. This will instantly load the notebook (prerendered on our servers), and interactive elements will work (this is done using PlutoSliderServer.jl). If you want to change code and run the notebook, simply click the ‚ÄúEdit or run‚Äù button in the top right of the screen. This will make a copy of the notebook on your computer that you can edit.How to shut down a notebookTODO"},{"url":"en/docs/frontmatter/","title":"üì∞ Frontmatter","tags":["docs","publishing","frontmatter","yaml","markdown","file","export","share","web"],"text":"Frontmatter Frontmatter is a way to add metadata to a Pluto.jl notebook, such as the title, description, authors, cover image, license, date and more. This data is used when sharing notebooks online, using Pluto HTML exports, PlutoUI.NotebookCard, PlutoSliderServer, PlutoPages or pluto.land.For example, the featured notebooks use frontmatter. When you see the list of all featured notebooks, notice how they all have a title, description, cover image and authors. And they areThe frontmatter GUIWhen editing a Pluto notebook, you can open the frontmatter editor by clicking the ‚ÄúShare button‚Äù in the top right.In the share menu, click the  icon to open the frontmatter editor.Here is a screenshot of the frontmatter editor. Scroll down to see more.In this editor, you can edit fields and add new fields. You are free to enter any data that you want (which you might want to use in your custom scripts), but some frontmatter entries have special meaning in the Pluto ecosystem.Special frontmatter entriesThe following keys have special meaning:title ‚Äì the title of the document. When not used, the notebook filename is used as title. This is used in Pluto.jl HTML exports as the <title> tag.description ‚Äì the description of the document. This is used in Pluto.jl HTML exports as the <meta name=\"description\" content=\"...\"> tag.image ‚Äì the URL of the cover image of the document.date ‚Äì the date of the document.license ‚Äì the license of the document.tags ‚Äì a vector of tags for the document, used by the PlutoPages.jl sidebar and search, and PlutoSliderServer.jl.layout ‚Äì the PlutoPages.jl layout file of the document.order ‚Äì the order of the document within its category.Open Graph (OG) tagsThe following keys are used as Open Graph (OG) tags in Pluto.jl HTML exports (using <meta property=\"og:...\">):title, type, description, image, article:tag, url, audio, video, site_name, locale, locale:alternate, determiner.Setting these values helps with sharing notebooks on social media and search engine optimization.The author fieldThere is also a vector author that is used to provide the authors of the notebook. The following fields have special meaning in the Pluto ecosystem:name ‚Äì the name of the author.url ‚Äì the URL of the author‚Äôs website. If this is a github user/organization URL, the author‚Äôs avatar will be shown in the notebook.image - the URL of the author‚Äôs avatar. This is not needed if the url is a github URL.PlutoPages.jlIf you are using PlutoPages.jl to write your website, you should at least set the following frontmatter entries for every page: layout and tags. (layout is the name of the layout file in the src/_includes/ directory.)Featured notebooksIf you are writing a featured notebook, check out other featured notebook files to see which frontmatter entries are required.Accessing frontmatter from JuliaIf you are writing a script to process Pluto notebooks, you can access the frontmatter data using the Pluto.frontmatter function. This function takes a notebook path as an argument, and returns a Dict with the frontmatter data.path = \"/path/to/notebook.jl\"\nfrontmatter = Pluto.frontmatter(path)\n@info \"Written by\" frontmatter[\"author\"]"},{"url":"en/docs/","title":"üôã Introduction","tags":["docs","introduction"],"text":"Welcome to Pluto!Welcome to the docs! Take a look at the sidebar on the left. ‚ò∫Ô∏è"},{"url":"en/docs/install/","title":"üåº How to install","tags":["docs","introduction"],"text":"Install Pluto on your own computerGo to plutojl.org/#install for instructions!System requirementsPluto works on Windows, Linux, MacOS, ChromeOS and Android. You need a computer with at least 4GB RAM, but 8GB is recommended for running multiple notebooks in parallel, or for using large packages.Pluto needs Julia to be installed, we recommend the latest version. Unreleased (alpha/beta preview) versions of Julia do not work well with Pluto.Pluto also needs a web browser to work. Make sure that your web browser is up-to-date, as Pluto uses many modern web technologies to work. Some browser extensions can break Pluto, such as Privacy Badger. You can disable these extensions for the Pluto domain (usually http://localhost:1234/).You do not need to be a system administrator to install Julia and Pluto.ChromeOSPluto works on a chromebook! You need to set up the Linux development environment, and then follow the Linux installation instructions as usual!iPad and iOSIt is not possible to run Julia on iPad or iOS (we think)‚Ä¶ But you could run Pluto on another computer or a web server, and access Pluto remotely on your iPad or iOS phone.Try Pluto without installationYou can try Pluto in your browser without installation before installing! Go to plutojl.org/#try to learn more. Note that your files will not be stored in the cloud!Use Pluto in the cloudIf you want to use Pluto without installation for more serious projects, there are a couple of options:Jolin Cloud ‚Äì jolin.io offers a cloud service for Pluto notebooks, with additional real-time data featuresJuliaHub ‚Äì see the documentationCoCalc ‚Äì see the documentationWith these three options you can store notebooks in the cloud, and you can also try bigger computers and GPUs. Jolin and JuliaHub also let you publish notebooks as public/private websites."},{"url":"en/docs/javascript-api/","title":"JavaScript API","tags":["javascript","web","widgets","advanced","docs"],"text":" A Pluto.jl notebook v0.20.14 frontmatter license url \"https github.com JuliaPluto featured blob 2a6a9664e5428b37abe4957c1dca0994f4a8b7fd LICENSES Unlicense\" image \"https upload.wikimedia.org wikipedia commons 9 99 Unofficial JavaScript logo 2.svg\" order \"3\" title \"JavaScript API\" tags \"javascript\", \"web\", \"widgets\", \"advanced\", \"docs\" license \"Unlicense\" description \"Use JavaScript to make your own interactive visualizations \" date \"2024 04 24\" layout \"layout.jlhtml\" frontmatter.author name \"Pluto.jl\" url \"https github.com JuliaPluto\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element format off return quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end format on end using HypertextLiteral using PlutoUI md\"\"\" JavaScript API ` script ` tags included in HTML output will be executed by Pluto, and you can use this to make interactive and dynamic widgets In your code, you will mostly be using Web APIs your code runs directly in the browser , like DOM manipulation. Use javascript.info https javascript.info or MDN https developer.mozilla.org to learn more about Web APIs. You can also import JavaScript libraries and frameworks and use them in your widget. We think the Web APIs and modern JavaScript are very powerful, and you should be able to do anything you want However, we decided to add a small amount of extra functionality to make it easier to write code specifically for Pluto outputs. \"\"\" md\"\"\" Debugging The HTML, CSS and JavaScript that you write run in the browser, so you should use the browser's built in developer tools https developer.mozilla.org en US docs Learn Common questions What are browser developer tools to debug your code. Check to make sure that you are able to debug JavaScript code \"\"\" htl \"\"\" script console.info \"Can you find this message in the console?\" script \"\"\" md\"\"\" And HTML and CSS \"\"\" htl \"\"\" style .cool class font size 1.3rem color purple background lightBlue padding 1rem border radius 1rem style div class \"cool class\" Can you find out which CSS class this is? div \"\"\" html\" span id currentScript \" md\"\"\" `currentScript` ‚Äì Selecting elements When writing the javascript code for a widget, it is common to select elements inside the widgets to manipulate them. In the number of clicks example above, we selected the ` span ` and ` button ` elements in our code, to trigger the input event, and attach event listeners, respectively. There are a numbers of ways to do this, and the recommended strategy is to create a wrapper ` span `, and use `currentScript.parentElement` to select it . `currentScript` When Pluto runs the code inside ` script ` tags, it assigns a reference to that script element to a variable called `currentScript`. You can then use properties like `previousElementSibling` or `parentElement` to \"navigate to other elements\". Let's look at the \"wrapper span strategy\" again. ```htmlmixed htl \"\\\"\" the wrapper span span button id \"first\" Hello button button id \"second\" Julians button script const wrapper span currentScript.parentElement we can now use querySelector to select anything we want const first button wrapper span.querySelector \"button first\" console.log first button script span \"\\\"\" ``` \"\"\" md\"\"\" Why not just select on `document.body`? In the example above, it would have been easier to just select the button directly, using ```javascript ‚õî do no use const first button document.body.querySelector \"button first\" ``` However, this becomes a problem when combining using the widget multiple times in the same notebook , since all selectors will point to the first instance. Similarly, try not to search relative to the ` pluto cell ` or ` pluto output ` element, because users might want to combine multiple instances of the widget in a single cell. \"\"\" html\"\"\" span id value span span id input span span id bond span \"\"\" md\"\"\" `value` ‚Äì Custom ` bind` value You can use JavaScript to write input widgets to be used with Pluto's ` bind`. The `input` event can be triggered on any object using ```javascript obj.value ... obj.dispatchEvent new CustomEvent \"input\" ``` For example, here is a button widget that will send the number of times it has been clicked as the bound value \"\"\" bind hello htl \"\"\" div button Click me button script let val 0 const div currentScript.parentElement const button div.querySelector \"button\" button.addEventListener \"click\", üê∏ Set the value of the div element and trigger an event üê∏ div.value val div.dispatchEvent new CustomEvent \"input\" script div \"\"\" hello md\"\"\" Default value `missing` When you write ` bind x Widget ` in your notebook, what is the initial value of `x`? By default, the macro ` bind` will set `x` to `missing` https docs.julialang.org en v1 manual missing , which will be the value of `x` while other cells are also running. Once all cells completed running, your browser can send the `.value` that it got from JavaScript, and cells that depend on `x` will run again with the value. These messages were debounced while cells were running, see section below. This means that simple JavaScript powered custom ` bind` widgets will trigger two runs when used in a notebook a first run with value `missing`, and a second run with the first value from JavaScript. `AbstractPlutoDingetjes.Bonds.initial value` To solve this, you can use `AbstractPlutoDingetjes.Bonds.initial value` https plutojl.org en docs abstractplutodingetjes initial value to tell Julia what the first value will be. This will then be used as the first value instead of `missing`. And if the first bond update from JavaScript is exactly the same, then this first bond update will not trigger a reactive run. \"\"\" md\"\"\" Debouncing Pluto automatically debounces all bonds while cells are running, no intermediate values are sent. Once all cells completed running, any queued bond updates are sent in one batch, but if the value of the same bond changed multiple times, only the last value is set, and intermediate values are discarded. This prevents a \"queue of updates\" that you could get when a bond controls a visualisation that takes a while to run. You could try it below \"\"\" bind fun fast Slider 1 100 fun fast bind fun slow Slider 1 100 let sleep 1 fun slow end html\" span id import \" md\"\"\" `import` ‚Äì script loading To use external javascript dependencies, you can load them from a CDN, such as jsdelivr.com https www.jsdelivr.com esm.sh https esm.sh Just like when writing a browser app, there are two ways to import JS dependencies a ` script ` tag, and the more modern ES6 import. Technically, this is not API added by Pluto, this will work in any browser context. But we thought it's good to mention here. Loading method 1 ES6 imports We recommend that you use an ES6 import https developer.mozilla.org en US docs Web JavaScript Guide Modules if the library supports it. If it does not, you might be able to still get it using esm.sh https esm.sh Awkward note about syntax Normally, you can import libraries inside JS using the import syntax ```javascript ‚õî do no use import confetti from \"https esm.sh canvas confetti 1.4.0\" import html, render, useEffect from \"https cdn.jsdelivr.net npm htm 3.0.4 preact standalone.mjs\" ``` In Pluto, this is currently not yet supported https github.com fonsp Pluto.jl issues 992 , and you need to use a different syntax as workaround ```javascript ‚úî use const default confetti await import \"https esm.sh canvas confetti 1.4.0\" const html, render, useEffect await import \"https cdn.jsdelivr.net npm htm 3.0.4 preact standalone.mjs\" ``` \"\"\" md\"\"\" Loading method 2 script tag ` script src \"...\" ` tags with a `src` attribute set, like this tag to import the d3.js library ```html script src \"https cdn.jsdelivr.net npm d3 6.2.0 dist d3.min.js\" script ``` will work as expected. The execution of other script tags within the same cell is delayed until a `src` script finished loading, and Pluto will make sure that every source file is only loaded once, even if the same ` script ` is included multiple times in multiple cells. \"\"\" md\"\"\" Pinning versions When using a CDN almost never want to use an unpinned import. Always version your CDN imports ```js ‚õî do no use \"https esm.sh canvas confetti\" \"https cdn.jsdelivr.net npm htm preact standalone.mjs\" ‚úî use \"https esm.sh canvas confetti 1.4.0\" \"https cdn.jsdelivr.net npm htm 3.0.4 preact standalone.mjs\" ``` \"\"\" html\" span id invalidation \" md\"\"\" `invalidation` ‚Äì cleanup In a ` script ` you can use the variable `invalidation` , which is a `Promise` https javascript.info promise basics that resolves when the display is about to disappear. You can use this to clean up resources. ```html htl \"\"\\\" script invalidation.then cleanup here script \"\"\\\" ``` üòâ To ObservableHQ users this is the same API as Observable \"\"\" md\"\"\" As a silly example, here is a widget that displays a `String`, and it loops through each of the letters, showing the UTF 16 character codes. The looping animation is created with `setInterval`, and when the display disappears, we use `invalidation` to call `clearInterval` and stop the loop. Why do we need this? Every time you change the text in the `TextField`, this triggers a re render of the cell. If we would not call `clearInterval`, then each text would create a new interval, slowly taking up more resources and slowing down the browser. \"\"\" bind some text TextField default \"Gecko\" htl \"\"\" div h6 some text h6 p üî° Letters span style \"font family monospace font weight 900 \" span p script const span currentScript.parentElement.querySelector \"span\" const original text some text let i 0 const interval handler setInterval const index i % original text.length const char original text index span.innerText ` \\ index \\ char code \\ char.codePointAt 0 ` i , 500 invalidation.then clearTimeout interval handler script div \"\"\" html\" span id return \" md\"\"\" `return` ‚Äì generate DOM from JavaScript If you ` script ` tag returns a `HTMLElement` like a ` div ` or ` input ` , Pluto will prepend that element before the ` script ` element that generated it. This makes it easier to use JavaScript code to create a DOM element. The element is added before , not after the script, so that it's a bit easier to use with ` bind`. \"\"\" htl \"\"\" script const element document.createElement \"h5\" element.innerText \"Whoopsiedoo \" element.style.color \"orange\" return element script \"\"\" details \"Show with syntax highlighting\", md\"\"\" ```htmlmixed script const element document.createElement \"h5\" element.innerText \"Whoopsiedoo \" element.style.color \"orange\" return element script ``` \"\"\" md\"\"\" info \"Persistant display\" Little technical note that you could ignore if the following conditions are met The cell re runs reactively , i.e. because one of the referenced variables re runs, not because you run the cell itself The old display and the new display have an `id` attribute set to the same value. Then the DOM element returned by the old script is shown as placeholder while the new script is running JS runs synchronously, but using top level `await` can cause a delay . This prevents a flash of empty content in between cell renders. In particular, if the new script happens to `return` the exact same element using `this` persistence , then that means the DOM element will always be displayed. \"\"\" html\" span id await \" md\"\"\" `await` ‚Äì top level support You can use `await` in the top level code of your script. And when your script uses `await`, Pluto will wait for the script to complete before executing the next script. You can use top level `await` to `import` libraries and more. `await` is also used internally by `AbstractPlutoDingetjes.Display.published to js`. Here is a silly example, showing that use can use `await` and that scripts execute sequentially \"\"\" bind await example val TextField default \"coolbeans\" widget htl \"\"\" div p Loading... p script const p currentScript.previousElementSibling const val await example val await new Promise resolve setTimeout p.innerText val resolve , 1000 script div \"\"\" htl \"\"\" widget widget widget \"\"\" html\" span id observablehq \" md\"\"\" ObservableHQ stdlib Pluto is inspired by observablehq.com https observablehq.com , an online reactive notebook for JavaScript. It's REALLY good, try it out We design Pluto's JavaScript runtime to be close to the way you write code in observable. Read more about the observable runtime in their interactive documentation https observablehq.com observablehq observables not javascript . You will find that many features `this`, `return`, `invalidation`, `await` are similar in Pluto and Observable. The following is different in Pluto JavaScript code is not reactive, there are no global variables. Cells can contain multiple script tags, and they will run consecutively also when using `await` We do not yet support async generators, i.e. `yield`. We do not support the observable keywords `viewof` and `mutable`. In Pluto, the `observablehq stdlib` https github.com observablehq stdlib library is pre imported, and you can use `DOM` `Files` `Generators` `Promises` `now` `svg` `html` `require` Currently not supported are `FileAttachment` `md` `Mutable` `resolve` `tex` `width` If you need these libraries, just get in touch. We are also using an outdated version of the stdlib. If you want the latest version, get in touch You can use these libraries in top level scripts, like `html` in this example \"\"\" htl \"\"\" script return html` h5 Hello world h5 ` script \"\"\" html\" span id lodash \" md\"\"\" Lodash The Lodash https lodash.com library is pre imported, and is available with ` ` inside your code. \"\"\" htl \"\"\" script const data rand 1 10, 15 const parted .partition data, n n % 2 return html` ul \\ .map parted, ns return html` li \\ ns.join \", \" li ` ul ` script \"\"\" html\" span id this \" md\"\"\" `this` ‚Äì stateful output In Pluto's runtime, there is a distinction between two types of ways that a cell can run 1. An explicit run a run triggered by user input Ctrl S, Shift Enter or clicking the play button or a cell deletion. 2. A reactive re run the cell runs because one of the variables referenced in the cell was redefined by another cell run. One difference is the JavaScript API `this` for an explicit run , the variable `this` is set to `undefined`. But with a reactive run , `this` will take the value of the last thing that was returned by the script. In particular, if you return an HTML node, and the cell runs a second time, then you can access the HTML node using `this`. Two reasons for using this feature are Stateful output you can persist some state in between re renders. Performance you can 'recycle' the previous DOM and update it partially using d3, for example . When doing so, Pluto guarantees that the DOM node will always be visible, without flicker. ‚òùÔ∏è Caveat ` script id ... ` This feature is only enabled for ` script ` tags with the `id` attribute set, e.g. ` script id \"first\" `. Without an `id`, `this` will always be set to `window`. Think of setting the `id` attribute as saying \"I am a Pluto script\". There are two reasons for this One Pluto cell can output multiple scripts, Pluto needs to know which output to assign to which script. Some existing scripts assume that `this` is set to `window` in toplevel code like in the browser . By hiding the `this` feature behind this caveat, we still support libraries that output such scripts. What should the `id` attribute be? This is a bit awkward we don't know yet. For now, just use the name of your favourite ice cream, but we are working on something better https github.com JuliaPluto AbstractPlutoDingetjes.jl pull 7 . Please comment on that PR if you want it \"\"\" trigger \"edit me \" let trigger html\"\"\" script id \"something\" console.log \"'this' is currently \", this if this null return html` blockquote I am running for the first time blockqoute ` else return html` blockquote b I was triggered by reactivity b blockqoute ` script \"\"\" end details \"Show with syntax highlighting\", md\"\"\" ```htmlmixed script id \"something\" console.log \"'this' is currently \", this if this null return html` blockquote I am running for the first time blockqoute ` else return html` blockquote b I was triggered by reactivity b blockqoute ` script ``` \"\"\" md\"\"\" Example d3.js transitions Type the coordinates of the circles here \"\"\" bind positions TextField default \"100, 300\" dot positions try parse. Int , split replace positions, ',' ' ' catch e 100, 300 end dot positions 100, 300 edit me md\"\"\" Notice that, even though the cell below re runs, we smoothly transition between states. We use `this` to maintain the d3 transition states in between reactive runs. \"\"\" htl \"\"\" script src \"https cdn.jsdelivr.net npm d3 6.2.0 dist d3.min.js\" script script id \"hello\" const positions dot positions const svg this null ? DOM.svg 600,200 this const s this null ? d3.select svg this.s s.selectAll \"circle\" .data positions .join \"circle\" .transition .duration 300 .attr \"cx\", d d .attr \"cy\", 100 .attr \"r\", 10 .attr \"fill\", \"gray\" const output svg output.s s return output script \"\"\" details \"Show with syntax highlighting\", md\"\"\" ```htmlmixed script src \"https cdn.jsdelivr.net npm d3 6.2.0 dist d3.min.js\" script script id \"hello\" const positions dot positions const svg this null ? DOM.svg 600,200 this const s this null ? d3.select svg this.s s.selectAll \"circle\" .data positions .join \"circle\" .transition .duration 300 .attr \"cx\", d d .attr \"cy\", 100 .attr \"r\", 10 .attr \"fill\", \"gray\" const output svg output.s s return output script ``` \"\"\" md\"\"\" Example Preact with persistent state \"\"\" md\"\"\" Modify `x`, add and remove elements, and notice that preact maintains its state. \"\"\" x \"hello pluto \", 232000,2,2,12 ,12,2,21,1,2, 120000 details md\"\"\" ```htmlmixed script type \"module\" id \"asdf\" await new Promise r setTimeout r, 1000 const html, render, Component, useEffect, useLayoutEffect, useState, useRef, useMemo, createContext, useContext, await import \"https cdn.jsdelivr.net npm htm 3.0.4 preact standalone.mjs\" const node this ?? document.createElement \"div\" const new state state if this null PREACT APP STARTS HERE const Item value const loading, set loading useState true useEffect set loading true const handle setTimeout set loading false , 1000 return clearTimeout handle , value return html` li \\ loading ? html` em Loading... em ` value li ` const App const state, set state useState new state node.set app state set state return html` h5 Hello world h5 ul \\ state.x.map x,i html` \\ Item value \\ x key \\ i ` ul ` PREACT APP ENDS HERE render html` \\ App `, node else node.set app state new state return node script ``` \"\"\", \"Show with syntax highlighting\" state Dict x x htl \"\"\" script id \"asdf\" await new Promise r setTimeout r, 1000 const html, render, Component, useEffect, useLayoutEffect, useState, useRef, useMemo, createContext, useContext, await import \"https cdn.jsdelivr.net npm htm 3.0.4 preact standalone.mjs\" const node this ?? document.createElement \"div\" const new state state if this null PREACT APP STARTS HERE const Item value const loading, set loading useState true useEffect set loading true const handle setTimeout set loading false , 1000 return clearTimeout handle , value return html` li \\ loading ? html` em Loading... em ` value li ` const App const state, set state useState new state node.set app state set state return html` h5 Hello world h5 ul \\ state.x.map x,i html` \\ Item value \\ x key \\ i ` ul ` PREACT APP ENDS HERE render html` \\ App `, node else node.set app state new state return node script \"\"\" html\" span id getBoundElementValueLikePluto span span id setBoundElementValueLikePluto span span id getBoundElementEventNameLikePluto span \" md\"\"\" Bond internals `getBoundElementValueLikePluto`, `setBoundElementValueLikePluto`, `getBoundElementEventNameLikePluto` Okay this one is not so exciting, but when you use ` bind` ```julia bind x html \" some element some element \" ``` Then Pluto will subscribe to the `\"input\"` event of ` some element `, and take its `.value` property to bind to the Julia variable. Well... almost For some elements, the event name and value getting is different. E.g. with ` button `, we actually listen to `\"click\"` instead of `\"input\"`. And for ` input type range `, we get the `.valueAsNumber` property instead of `.value`. This is what you can use these functions for ```ts getBoundElementValueLikePluto element HTMLElement any setBoundElementValueLikePluto element HTMLElement, value any void getBoundElementEventNameLikePluto element HTMLElement string ``` They can be useful when creating higher order widgets widgets that layer on top of, or interact with other widgets. \"\"\" html\"\"\" span id metadata span span id getNotebookMetadataExperimental span span id setNotebookMetadataExperimental span span id deleteNotebookMetadataExperimental span span id getCellMetadataExperimental span span id setCellMetadataExperimental span span id deleteCellMetadataExperimental span \"\"\" md\"\"\" Metadata for notebooks and cells Notebooks can have metadata, which is stored as TOML content at the top of the `.jl` file. For example, frontmatter https github.com fonsp Pluto.jl pull 2104 is stored as notebook metadata. We have some experimental API that lets you work with notebook metadata from widgets This could be a very powerful feature when used well Note that you can also use sessionStorage localStorage https javascript.info localstorage inside your widgets. Think about what your storage should be persisted for `sessionStorage` reading a notebook, running and changing cells. But when opening the notebook tomorrow, it should be gone. `localStorage` stored for a long time on this browser. Will be there tomorrow, but someone else opening the notebook will not have the data. notebook cell metadata stored permanently in the `.jl` file when someone else opens the notebook, they will continue with your storage. For this, we provide the following API ```ts getNotebookMetadataExperimental key string any setNotebookMetadataExperimental key string, value any Promise void deleteNotebookMetadataExperimental key string Promise void ``` The objects that you store should be TOML serializable stick to simple JS types like String, Number, Array, Object. Return type `Promise void ` means that a promise is returned, that resolves when the data is stored correctly. Cell metadata ```ts getCellMetadataExperimental key string, cell id string? any setCellMetadataExperimental key string, value any, cell id string? Promise void deleteCellMetadataExperimental key string, cell id string? Promise void ``` Providing the `cell id` is only necessary when storing data on another cell than that where your ` script ` is executing. Return type `Promise void ` means that a promise is returned, that resolves when the data is stored correctly. \"\"\" TableOfContents "},{"url":"en/docs/launch-pluto/","title":"üåü Launching Pluto","tags":["docs","file","navigation"],"text":"How to start PlutoPluto is a Julia package, which runs on your computer. It start a small local web server, and you can connect to it from your web browser.Step 0: install Julia and PlutoDid you already install Julia and Pluto? Take a look at the installation guide.Step 1: start JuliaFirst, start Julia. In some cases, you can search for the app ‚ÄúJulia‚Äù on your computer and launch it. In other cases, you can open a terminal (search for the app ‚ÄúTerminal‚Äù) and type the command julia.Step 2: start PlutoIn Julia, run this command to start Pluto:import Pluto\nPluto.run()\nBrowser sessionWhen Pluto starts running, it automatically opens a new browser tab that connects to http://localhost:1234, which is the address of the Pluto server. You will see the main menu of Pluto.The Pluto main menu The first page you see when you open a new browser tab is the main menu of Pluto. It‚Äôs the page that says ‚ÄúWelcome to Pluto‚Äù. From here, you can create a new notebook, open an existing notebook, or you can take a look at the featured notebooks, further down the page.Go to the main menu from a notebookTo go back to the main menu from a notebook, you can click the Pluto logo in the top left corner of the browser window.TipJust like on websites, you can open pages in a new tab. For example, you can right click the Pluto logo in the top left corner of the browser window, and select ‚ÄúOpen in new tab‚Äù. This will open a new tab that is connected to the same Pluto session.Go to the main menu from a new tabIf you open a new tab in your browser, you can also go directly to the Pluto server. Type localhost:1234 in the address bar, and press Enter. You can also bookmark this page for easy access.Multiple notebooksSomething important to know: each Pluto session (created by running Pluto.run()) can run multiple notebooks at the same time. The notebooks in your Pluto session are managed from the Pluto main menu. In the screenshot above, you see the Pluto main menu, with 3 notebooks currently running.If you use the main menu to create a new notebook or open a notebook, it will be added to the session. If you go back to the main menu, you can add more notebooks to the session.Advanced: Mirror viewPluto has a special feature ‚Äì¬†you can open the same notebook in two different browser windows, and they will stay synchronized. This is useful if you are working with two parts of a notebook at the same time. For example, you can change your analysis code (at the bottom of the notebook) in one window, and you can watch the plots (at the top of the notebook) in a second window.To use mirror view, you first open a notebook, and you copy the URL of the notebook from the address bar. This will look like http://localhost:1234/edit?id=0ec9caa2-3fa7-11f0-3e46-3bcef32ce8e3. Then open a new browser window, and paste the URL in the address bar. Now you have two windows that are connected to the same notebook, and they will stay synchronized.Limitation: no unsaved editsCurrently, unsaved edits (code changes before your press Shift+Enter or Save) are not synced between the two windows. This is usually not an issue, but it is possible to lose work if both sides are editing the same cell ‚Äì submitting on one side will overwrite the other side. The otherside can still use Ctrl+Z to get their old code back. See this PR for more detailsTipYou can also use the ‚ÄúMirror view‚Äù feature to collaborate with someone else on another computer, which can be really fun! We recommend a service like bore.pub to share the notebook with someone else, and don‚Äôt change Pluto‚Äôs security settings. Because ‚Äì be careful! Someone with access to the notebook, has complete access to your computer. They can install and run programs without your approval.We have used this feature to collaborate on notebooks, and we found it quite important to have good communication using an audio call. This also avoids editing the same cell.Advanced: Multiple Pluto sessionsYou can start Pluto multiple times in parallel (for example: on two different Julia versions). In this case, each Pluto server will find the first available port. Usually, the first server will find port 1234, the second server will find port 1235, and so on.This means that you can open two browser windows, and connect to the two different Pluto servers in parallel:http://localhost:1234\nhttp://localhost:1235\nUsually, this is not super useful. If you find yourself on port 1235 by accident, try shutting down all Pluto/Julia processes and starting again."},{"url":"en/docs/notebooks-online/","title":"üìï Notebooks online ‚Äì Pluto.jl notebooks as web pages","tags":["docs","publishing","PlutoSliderServer","glass","glassnotebook","github","hosting","web","export","html","netlify"],"text":"How to host Pluto.jl notebooks onlineWhen you are done writing your notebook, you can put it on the internet as a website! Notebooks as websites is a core feature of Pluto. This page will explain how you go from a notebook on your computer, say animals.jl, to a website like https://example.com/animals, where anyone can read your notebook directly, without needing to install Julia or Pluto.There are many options fitting to different needs. Some are really easy, while others are more complex.üìé Pluto file formatsAnd good to know: Pluto notebooks are .jl files, which only contain the code of your notebook, not the outputs. For example, if your notebook contains plot(x, y), then the resulting PNG image is not stored in the .jl file. Other people need to install Pluto to open the file.You can also use Pluto to export a notebook to a .html or .pdf file by clicking the  icon. These files contain outputs, like the plot image. Other people can open these files directly on their computer, without needing to install Pluto.pluto.land: Simple sharingpluto.land is a new, simple way to share your Pluto notebooks online. Just export your notebook to HTML, then upload the HTML file to pluto.land. You‚Äôll get a unique URL that you can share with anyone!Pros:FreeAwesomeSuper simple to useNo account requiredCons:No updates: to change the notebook, you just need to upload a new HTML file, and you get a new URLGitHub: static-export-templateIf you have a GitHub account, then this is the easiest option. Go to github.com/JuliaPluto/static-export-template and follow the easy instructions with screenshots to set up your repository. This sets up a repository with .jl notebook files, which are automatically executed, exported and hosted on the cloud. You get a website like https://username.github.io/my_project where you can read the notebooks.Pros:FreeWorks for multiple notebooksEasy notebook updates: changing .jl files automatically updates the websiteCons:Takes 15-30 minutes to set up (but not too hard!)You need to use GitHubNetlify drop: ‚Äúeasy for folders‚ÄùIf you just have a couple of .html files that you exported with Pluto, then you can use netlify drop to put them online as a website. Put all .html files in one folder on your computer, and drag the folder into netlify drop. This will give you a website!This only works with .html files that you exported yourself, not with .jl notebook files.Pros:FreeFast and easyCons:Updating the website with new notebooks requires a bit of careYou need a Netlify accountNo automatic index page listing all notebooksDeprecatedThe options below used to work in the past, but they are no longer supported.Glass Notebook (deprecated)If you have a GitHub account, then glassnotebook.io is a great option for hosting your notebooks online. Glass can also host notebooks interactively: people who visit your website can interact with sliders and buttons instantly! Glass was made specifically for Pluto.jl, so it works great with Julia and Pluto!Pros:Free (for static notebooks)Ability to host interactive notebooks (paid option)Easy user interfaceSupport from developers if things don‚Äôt workCons:You need to use GitHub"},{"url":"en/docs/packages-advanced/","title":"üì¶ Packages: advanced ‚Äì Pkg.activate in a cell","tags":["docs","reproducibility","advanced"],"text":"Advanced: set up an environment with Pkg.activatePluto‚Äôs package manager is enabled for all users, for ease of use and to promote reproducibility in scientific computing. There is no option to disable the behaviour globally (for your entire Pluto session). Instead, Pluto will detect notebooks that use Pkg.activate to set up an environment explicitly, and uses the old behaviour for those notebooks.The philosophy here is that everyone should have a reproducible package environment by default, without having to do anything. This takes priority over other use cases, and hence not using the built-in package manager requires some extra work.Any notebook that calls Pkg.activate will not use Pluto‚Äôs package management, and run in ‚Äòbackwards compatibility mode‚Äô. The Pkg.activate call should be placed directly in your notebook code: it is detecting using the same syntax analysis used for reactivity.Pattern: The ‚Äúglobal environment‚ÄùIf you do not intend on sharing a notebook file and you want to use your global package environment (called (v1.6) or similar, the one you get when you launch the Julia REPL), then you can call Pkg.activate() without any arguments.üôã If you are developing a package, then activating your global environment is an easy way to test your local version in Pluto.This ‚Äúglobal environment‚Äù pattern can be placed at the top of a notebook:begin\n    import Pkg\n    # careful: this is _not_ a reproducible environment\n    # activate the global environment\n    Pkg.activate()\n    using Plots, PlutoUI, LinearAlgebra\nend\nWhen running this in Pluto (try it out!), you will notice that the status marks next to packages disappear, and Pluto is running in ‚Äòbackwards compatibility mode‚Äô. Packages will no longer be installed or removed automatically, you have to use the Pkg REPL to do this yourself.Pattern: The ‚Äúshared environment‚ÄùIf you have multiple notebooks in a repository and you want to use share a Pkg environment between them, then you can call Pkg.activate(path_to_environment). You can use @__DIR__ to get the path of the notebook‚Äôs folder, and joinpath(@__DIR__, \"..\") to get its parent, joinpath(@__DIR__, \"..\", \"..\") for the parent‚Äôs parent, etc.The function Base.current_project() can be used to automatically find the closest parent directory that contains a Project.toml, in most cases this is what you want.For example, if your project looks like this:my_project/\n    data/\n        ...\n    notebooks/\n        Interesting analysis.jl\n        ...\n    Project.toml\n    Manifest.toml\n    ...\nthen the ‚Äúshared environment‚Äù pattern can be placed at the top of a notebook:begin\n    import Pkg\n    # activate the shared project environment\n    Pkg.activate(Base.current_project())\n    # instantiate, i.e. make sure that all packages are downloaded\n    Pkg.instantiate()\n    using Plots, PlutoUI, LinearAlgebra\nend\nWhen running this in Pluto, you will notice that the status marks next to packages disappear, and Pluto is running in ‚Äòbackwards compatibility mode‚Äô. Packages will no longer be installed or removed automatically, you have to use the Pkg REPL to do this yourself.Pattern: The ‚ÄúPkg cell‚ÄùWhen adding packages, Pluto‚Äôs default package management will always install the latest version from the registry. If you need to install a specific version or branch of a package, or a package is not registered, you can use a ‚ÄúPkg cell‚Äù.A common pattern is a so-called ‚ÄúPkg cell‚Äù, placed at the top of a notebook:begin\n    import Pkg\n    # activate a temporary environment\n    Pkg.activate(mktempdir())\n    Pkg.add([\n        Pkg.PackageSpec(name=\"Plots\", version=\"1\"),\n        Pkg.PackageSpec(name=\"PlutoUI\", version=\"0.7\"),\n    ])\n    using Plots, PlutoUI, LinearAlgebra\nend\nThis will 1) activate a temporary environment using Pkg.activate, 2) add the required packages, 3) import them with using. When running this in Pluto (try it out!), you will notice that the status marks next to packages disappear, and Pluto is running in ‚Äòbackwards compatibility mode‚Äô. Packages will no longer be installed or removed automatically, you have to use the Pkg REPL to do this yourself.Placing all code in a single begin block ensures that the lines will run in the correct order.Advanced: edit the notebook environmentPluto.jl includes a helper function Pluto.activate_notebook_environment that activates a notebook Pkg environment in the REPL:julia> import Pluto\n\njulia> Pluto.activate_notebook_environment(\"~/Documents/hello.jl\")\n\njulia> ]\n\n(hello.jl) > status\nAfter activating a notebook environment, you can use the Pkg REPL to view or modify the embedded environment. Changes from either side are synchronised (i.e. Pkg REPL changes are written to the notebook, editing the notebook updates the Pkg REPL env). Watch the demo video:"},{"url":"en/docs/packages/","title":"üì¶ Packages ‚Äì Built-in package management","tags":["docs","reproducibility"],"text":"Pluto‚Äôs built-in package managementPluto has a built-in package manager, which means:üéà Packages are automatically installed when you use import or using.üéà Your package environment is stored inside the notebook file. When someone else opens your notebook with Pluto, the exact same package environment will be used, and packages will work on their computer.üôã These two features are designed to make it easy to write and share reproducible notebooks.Basic usageInstalling and using packagesPluto will automatically install or remove packages while you work on your notebook. When you import a new package, Pluto will install it:üôã Most packages will write installation instructions in their documentation: like ‚ÄúRun julia> ] install Example to install Example‚Äù.If you are using Pluto, you should skip these instructions, and import the package directly, using import Example or using Example.LogsInstalling packages can take some time, especially when starting Julia for the first time. Click on the status mark next to a package to view the installation progress. You can click on the  icon to view the logs.Removing packagesRemoving packages is automatic: when you delete code that imports a package, it will be uninstalled from the package environment. It is recommended to restart the notebook process afterwards to get a fresh start.Updating packagesYou can search for and install any available updates by clicking on the  icon. A backup of your notebook file will be created in the same folder as your notebook, in case the new versions do not work as expected.Long waiting timesJulia needs to download and precompile packages before you can use them. When using many packages, this can take a couple of minutes. Before installing a new package, Pluto can give an estimate of how long it will take to install:Pre-installed versions are preferredWhen adding a package to your notebook, Pluto will ask Pkg to install a version that was previously downloaded on your computer. This was added in May 2024, on older versions, Pkg would always try to install the newest versions.This should make it much faster to open a notebook and import some packages that you already used recently. If you need the latest versions, then you have to use the Update button after adding the packages.Package installations are shared between environmentsIn Julia, packages are always installed globally, while environments (including notebooks) only store version information, not the package code itself. This means that multiple notebooks that use the same version of Plots will not lead to more disk usage or precompile time. (This is different from venv in Python/pip, or node_modules in NodeJS/npm, where every environment contains copies of package code by default.) Julia‚Äôs package manager is designed to work well with many package environments on the same computer.Of course, if different notebooks use different version of the same package, and you work on both in parallel, then source files for both versions will exist on your computer. A small price to pay for simpler reproducibility!In Julia 1.6, you can clean up package files that have not been used in a while with import Pkg; Pkg.gc(). In Julia 1.7 and up, this will be done automatically.Good to knowBased on PkgPluto‚Äôs package management is a wrapper around Pkg.jl, Julia‚Äôs built-in package manager. Packages are installed from the General registry.üôã You can discover all available packages on juliahub.com.Isolated package environmentEvery notebook runs in its own isolated package environment. This ensures that your notebook code will not be influenced by packages installed elsewhere. (The LOAD_PATH is set to [\"@\", \"@stdlib\"].)Notebook filePluto stores the contents of Project.toml and Manifest.toml directly in the notebook file. For forwards-backwards compatibility, this is done using two extra ‚Äúcells‚Äù at the bottom of the file, containing the two files as string literals. For example, here is a notebook that imports HypertextLiteral and PlutoUI: example file.üôã Try it out! Open Pluto, import some packages and look at the notebook file!Fully reproducible environmentsWhen someone else opens your notebook for the first time, Pluto will install all required packages based on the information in the Manifest.toml file. This means that the exact same versions of all packages you used in the notebook will be installed, ensuring your work is fully reproducible when shared with others.Compatibility across Pluto versionsWhen opening an old Pluto notebook that does not have embedded project files, Pluto will generate them as if you typed those imports for the first time. If a call to Pkg.activate is made, the notebook will run in ‚Äòbackwards compatibility mode‚Äô, using the same environment and behaviour as old Pluto versions.Compatibility across Julia versionsThe Manifest.toml is designed to be (generally) backwards compatible: you can upgrade Julia and use an old manifest. However, the Manifest.toml is not always forwards compatible: a manifest generated generated with a newer version of Julia might not run on older versions.Pluto will always try to load the embedded manifest, and if it fails, it will discard the manifest (leaving only Project.toml) and try again. This is one reason why Pluto automatically adds [compat] ranges for each package in the Project.toml.Custom registriesPkg.jl supports additional private or public registries, which can be added in the Julia REPL with ] registry add https://github.com/myuser/MyRegistry.git, and this is also supported by Pluto‚Äôs package managemer.However, note that registries are not stored in the Project.toml/Manifest.toml files, which means that other people can only open your notebook if they added the custom registry before doing so. Alternatively, you can use a ‚ÄúPkg cell‚Äù (more on this later) where you add the registry before adding packages.Learn more: advanced Pkg management"},{"url":"en/docs/presentation/","title":"üìà Presentation mode","tags":["docs","publishing","export","share","presentation","slideshow"],"text":"Presentation modePluto.jl has a built-in presentation mode that lets you view your notebook in full-screen as a slideshow.How to start presentation modePresentation mode can be started from the Pluto.jl interface.Step 1Open your notebook in Pluto, and wait for all cells to finish running.Step 2Press the Share button in the top right.\nStep 3Click the ‚ÄúSlideshow‚Äù button.\nUsing presentation modeIn presentation mode, you can use the arrow buttons in the bottom right to move between slides. You can also use the keyboard arrow keys. Press the Escape key to exit presentation mode.If you want to present in full screen (without the browser addres bar, etc), use your browser‚Äôs full screen mode (F11).Slide separatorsPluto uses Markdown headers as slide separators: every time you write a header in Markdown, it is treated as a new slide. There are two slide types:#Header 1 creates a title slide: content will be centered vertically.##Header 2 creates a regular slide: the header appears on top of the screen, with content below.All other headers (### etc) do not create a new slide, they will be part of the previous slide.ExampleIf your notebooks contains these two cells:md\"\"\"\n# Here is a title slide!\nWith some extra content\n\"\"\"\nmd\"\"\"\n## This is a regular slide\nBlablabla\n\"\"\"\nIn regular Pluto, this looks like:Presentation modeIn presentation mode, this creates two slides:"},{"url":"en/docs/reactivity/","title":"üîÑ Reactivity ‚Äì how Pluto notebooks update automatically","tags":["docs","reproducibility"],"text":"Reactivity in Pluto.jlPluto notebooks are reactive! This means that when you change a value or a line of code, Pluto automatically updates all the cells that depend on it. No need to run cells one by one ‚Äî Pluto figures out what needs to be updated, and does it for you. ‚ú®Why is reactivity important?Reproducibility: Your results always match your code. If you change an input, all outputs update instantly.No hidden state: You can‚Äôt accidentally use an old value‚Äîeverything is always up to date.Easy exploration: Try out ideas quickly! Change a number, see what happens.How is this different from Jupyter?Cells run automatically when they need to. If a cell uses a variable, it will re-run when that variable changes.Global variables are deleted when their definition is removed. For example, if you change a cell from apple = 1 to banana = 2, then the apple variable will be deleted. It does not ‚Äúlinger around‚Äù in the background.You are not allowed to redefine a global variable in a second cell. Two cells cannot both define x.How does it work?Pluto tracks the dependencies between cells by looking at the syntax tree of your code. Pluto searches for variables assignemtns and referneces, and it uses this to build up a reactive dependency graph of your notebook.Using this dependency graph, Pluto knows how cells relate to each other. Pluto can search ‚Äúup the tree‚Äù to find out which cells should run before, and ‚Äúdown the tree‚Äù to find out which cells depend on a given cell.Read more about Pluto‚Äôs reactivity algorithm in:ExpressionExplorer.jlPlutoDependencyExplorer.jlHelp I want to turn it off!Pluto does not have a global switch to turn off reactivity, there is no ‚ÄúJupyter mode‚Äù.However, you can turn off reactivity for a specific cell! You can disable a cell. More on this later!"},{"url":"en/docs/search/","title":"Search results","tags":[],"text":"window.init_search();SearchResults\nLoading..."},{"url":"en/docs/threejs/","title":"Three.js in Pluto ‚Äì example of using a JS library","tags":["javascript","web","widgets","advanced","docs"],"text":"Fons wrote a short tutorial for using three.js in Pluto, as an example of using a JavaScript library in Pluto to create a simple visualisation library. Available at featured.plutojl.org/web/threejs!"},{"url":"en/docs/update/","title":"üå∏ How to update","tags":["docs","introduction"],"text":"Update your Pluto installationYou can update Pluto using the Julia package manager. Open a Julia process and use Pkg to update Pluto:julia> import Pkg\njulia> Pkg.update(\"Pluto\")\nThis should update Pluto to the latest version (check our GitHub releases to find out!).Not the latest version?Sometimes, it is not possible to install the latest version of Pluto because of compatibility issues with other packages that you have installed in your environment.Some tips to fix it:First, use Pkg.status() to find out which packages you have installed, and remove any packages that you are no longer using. Now try to update again.If this did not work, try updating all packages (not just Pluto) with Pkg.update().Finally, you could use Pkg.status(outdated=true, mode=Pkg.PKGMODE_MANIFEST) to see the compatibility bounds. Here is an example.\nconst latest = fetch(\"https://api.github.com/repos/fonsp/Pluto.jl/releases\", {\nmethod: \"GET\",\nmode: \"cors\",\ncache: \"no-cache\",\nheaders: {\n    \"Content-Type\": \"application/json\",\n},\nredirect: \"follow\",\nreferrerPolicy: \"no-referrer\",\n}).then(r => r.json()).then(r => r.reverse()).then(releases => releases[releases.length - 1].tag_name)\nlatest.then(v => {\nconst el = document.querySelector(\"#latesthere\")\nconsole.log(el, v)\nel.innerText = v\nel.style.fontWeight = \"bold\"\n})"}]