[{"url":".","title":"index","tags":["welcome"],"text":""},{"url":"sidebar data/","title":"sidebar data","tags":[],"text":"Dict \"docs\" \"Introduction\" collections \"docs\" .pages ‚à© collections \"introduction\" .pages, \"Reproducibility\" collections \"docs\" .pages ‚à© collections \"reproducibility\" .pages, \"Advanced Widgets\" collections \"docs\" .pages ‚à© collections \"advanced\" .pages ‚à© collections \"widgets\" .pages, , \"examples\" \"Getting started\" collections \"examples\" .pages, , \"blog\" \"Asdfsafd\" collections \"blog\" .pages , "},{"url":"blog/something/","title":"Basic syntax","tags":["blog"],"text":" A Pluto.jl notebook v0.18.2 frontmatter title \"Basic syntax\" description \"A simple notebook demonstrating the Julia syntax essentials\" layout \"layout.jlhtml\" date \"2020 06 01\" tags \"blog\" using Markdown using InteractiveUtils md\" Variables We can define a variable using ` ` assignment . Then we can use its value in other expressions \" x 3 y 2x md\"By default Julia displays the output of the last operation. You can suppress the output by adding ` ` a semicolon at the end. \" md\"We can ask what type a variable has using `typeof` \" typeof y md\" Functions\" md\"We can use a short form, one line function definition for simple functions \" f x 2 x md\"Typing the function's name gives information about the function. To call it we must use parentheses \" f f 10 md\"For longer functions we use the following syntax with the `function` keyword and `end` \" function g x, y z x y return z^2 end g 1, 2 md\" For loops\" md\"Use `for` to loop through a pre determined set of values \" let s 0 for i in 1 10 s i Equivalent to s s i end s end md\"Here, `1 10` is a range representing the numbers from 1 to 10 \" typeof 1 10 md\"Above we used a `let` block to define a new local variable `s`. But blocks of code like this are usually better inside functions, so that they can be reused. For example, we could rewrite the above as follows \" function mysum n s 0 for i in 1 n s i end return s end mysum 100 md\" Conditionals `if`\" md\"We can evaluate whether a condition is true or not by simply writing the condition \" a 3 a 5 md\"We see that conditions have a Boolean `true` or `false` value. We can then use `if` to control what we do based on that value \" if a 5 \"small\" else \"big\" end md\"\"\"Note that the `if` also returns the last value that was evaluated, in this case the string `\"small\"` or `\"big\"`, Since Pluto is reactive, changing the definition of `a` above will automatically cause this to be reevaluated \"\"\" md\" Arrays\" md\" 1D arrays `Vector`s \" md\"We can make a `Vector` 1 dimensional, or 1D array using square brackets \" v 1, 2, 3 typeof v md\"The `1` in the type shows that this is a 1D array. We access elements also using square brackets \" v 2 v 2 10 md\"Note that Pluto does not automatically update cells when you modify elements of an array, but the value does change.\" md\"A nice way to create `Vector`s following a certain pattern is to use an array comprehension \" v2 i^2 for i in 1 10 md\" 2D arrays matrices \" md\"We can make small matrices 2D arrays with square brackets too \" M 1 2 3 4 typeof M md\"The `2` in the type confirms that this is a 2D array.\" md\"This won't work for larger matrices, though. For that we can use e.g.\" zeros 5, 5 md\"Note that `zeros` gives `Float64`s by default. We can also specify a type for the elements \" zeros Int, 4, 5 md\"We can then fill in the values we want by manipulating the elements, e.g. with a `for` loop.\" md\"A nice alternative syntax to create matrices following a certain pattern is an array comprehension with a double `for` loop \" i j for i in 1 5, j in 1 6 md\"\"\" Acknowledgement \"\"\" Markdown.MD Markdown.Admonition \"warning\", \"This notebook is taken from\", md\"\"\" Computational Thinking , a live online Julia Pluto textbook. computationalthinking.mit.edu https computationalthinking.mit.edu , original notebook https github.com mitmath 18S191 blob Fall20 lecture notebooks Basic%20Julia%20syntax.jl \"\"\" using PlutoUI TableOfContents "},{"url":"blog/yayy/","title":"yayy","tags":["blog"],"text":"Hello there! My name is  fons That's 1 cool That's 2 cool That's 3 cool Want to embed some HTML?  Easy!  Just type the HTML! \\[\\sqrt{\\frac{1}{2}}\\]"},{"url":"docs/AbstractPlutoDingetjes/","title":"AbstractPlutoDingetjes","tags":["docs","widgets","AbstractPlutoDingetjes","advanced"],"text":" A Pluto.jl notebook v0.19.36 frontmatter image \"https media.giphy.com media l3vRfDn9ca5PVkHv2 giphy.gif\" layout \"layout.jlhtml\" tags \"docs\", \"widgets\", \"AbstractPlutoDingetjes\", \"advanced\" date \"2023 11 21\" description \"AbstractPlutoDingetjes allows you to write more advanced widgets to be used inside Pluto.jl.\" license \"Unlicense\" frontmatter.author name \"Pluto.jl\" url \"https github.com JuliaPluto\" using Markdown using InteractiveUtils using AbstractPlutoDingetjes md\"\"\" AbstractPlutoDingetjes.jl \"\"\" Docs.Binding AbstractPlutoDingetjes, AbstractPlutoDingetjes md\"\"\" https media.giphy.com media l3vRfDn9ca5PVkHv2 giphy.gif \"\"\" md\"\"\" AbstractPlutoDingetjes.Bonds \"\"\" Docs.Binding AbstractPlutoDingetjes.Bonds, initial value Docs.Binding AbstractPlutoDingetjes.Bonds, transform value Docs.Binding AbstractPlutoDingetjes.Bonds, possible values Docs.Binding AbstractPlutoDingetjes.Bonds, NotGiven Docs.Binding AbstractPlutoDingetjes.Bonds, InfinitePossibilities Docs.Binding AbstractPlutoDingetjes.Bonds, validate value md\"\"\" AbstractPlutoDingetjes.Display \"\"\" Docs.Binding AbstractPlutoDingetjes.Display, published to js md\"\"\" Extras \"\"\" Docs.Binding AbstractPlutoDingetjes, is supported by display Docs.Binding AbstractPlutoDingetjes, is inside pluto import PlutoUI PlutoUI.TableOfContents include definitions true html\"\"\" style import url 'https fonts.googleapis.com css2?family Jaldi wght 400 700&display swap' pluto output font family 'Jaldi', sans serif overflow y hidden html font size 20px pluto output h1, pluto output h2, pluto output h3, pluto output h4, pluto output h5, pluto output h6 font family Jaldi, sans serif line height 1 pluto output .pluto docs binding h1 font size 1.4em pluto output h1 margin block start 2.5em important pluto output .pluto docs binding h2 font size 1.3em pluto output .pluto docs binding h3, pluto output .pluto docs binding h4, pluto output .pluto docs binding h5, pluto output .pluto docs binding h6 font size 1.1em style \"\"\" pkgversion AbstractPlutoDingetjes "},{"url":"docs/","title":"üôã Introduction","tags":["docs","introduction"],"text":"Welcome to Pluto! A very cool programming environment."},{"url":"docs/install/","title":"üåº How to install","tags":["docs","introduction"],"text":"First-time setup: Install Julia & Pluto Video version: Text and pictures version: Step 1: Install Julia 1.6.0 Go to  https://julialang.org/downloads  and download the current stable release, Julia 1.6.0, using the correct version for your operating system (Linux x86, Mac, Windows, etc). Step 2: Run Julia After installing,  make sure that you can run Julia . On some systems, this means searching for the ‚ÄúJulia 1.6.0‚Äù program installed on your computer; in others, it means running the command  julia  in a terminal. Make sure that you can execute  1 + 1 : Make sure that you are able to launch Julia and calculate  1+1  before proceeding! Step 3: Install  Pluto Next we will install the  Pluto notebook  that we will be using during the course. Pluto is a Julia  programming environment  designed for interactivity and quick experiments. Open the  Julia REPL . This is the command-line interface to Julia, similar to the previous screenshot. Here you type  Julia commands , and when you press ENTER, it runs, and you see the result. To install Pluto, we want to run a  package manager command . To switch from  Julia  mode to  Pkg  mode, type  ]  (closing square bracket) at the  julia>  prompt: julia> ]\n\n(@v1.6) pkg>\n The line turns blue and the prompt changes to  pkg> , telling you that you are now in  package manager mode . This mode allows you to do operations on  packages  (also called libraries). To install Pluto, run the following (case sensitive) command to  add  (install) the package to your system by downloading it from the internet.\nYou should only need to do this  once  for each installation of Julia: (@v1.6) pkg> add Pluto\n This might take a couple of minutes, so you can go get yourself a cup of tea! You can now close the terminal. Step 4: Use a modern browser: Mozilla Firefox or Google Chrome We need a modern browser to view Pluto notebooks with. Firefox and Chrome work best. Second time:  Running Pluto & opening a notebook Repeat the following steps whenever you want to work on a project or homework assignment. Step 1: Start Pluto Start the Julia REPL, like you did during the setup. In the REPL, type: julia> using Pluto\n\njulia> Pluto.run()\n The terminal tells us to go to  http://localhost:1234/  (or a similar URL). Let‚Äôs open Firefox or Chrome and type that into the address bar. If you‚Äôre curious about what a  Pluto notebook  looks like, have a look at the  sample notebooks . Samples 1, 2 and 6 may be useful for learning some basics of Julia programming. If you want to hear the story behind Pluto, have a look a the  JuliaCon presentation . If nothing happens in the browser the first time, close Julia and try again. And please let us know! Step 2a: Opening a notebook from the web This is the main menu - here you can create new notebooks, or open existing ones. Our homework assignments will always be based on a  template notebook , available in this GitHub repository. To start from a template notebook on the web, you can  paste the URL into the blue box  and press ENTER. For example, homework 0 is available  here . Go to this page, and on the top right, click on the button that says ‚ÄúEdit or run this notebook‚Äù. From these instructions, copy the notebook link, and paste it into the box. Press ENTER, and select OK in the confirmation box. The first thing we will want to do is to save the notebook somewhere on our own computer; see below. Step 2b: Opening an existing notebook file When you launch Pluto for the second time, your recent notebooks will appear in the main menu. You can click on them to continue where you left off. If you want to run a local notebook file that you have not opened before, then you need to enter its  full path  into the blue box in the main menu. More on finding full paths in step 3. Step 3: Saving a notebook We first need a folder to save our homework in. Open your file explorer and create one. Next, we need to know the  absolute path  of that folder. Here‚Äôs how you do that in  Windows ,  MacOS  and  Ubuntu . For example, you might have: C:\\Users\\fonsi\\Documents\\18S191_assignments\\  on Windows /Users/fonsi/Documents/18S191_assignments/  on MacOS /home/fonsi/Documents/18S191_assignments/  on Ubuntu Now that we know the absolute path, go back to your Pluto notebook, and at the top of the page, click on  ‚ÄúSave notebook‚Ä¶‚Äù . This is where you type the  new path+filename for your notebook : Click  Choose . Step 4: Sharing a notebook After working on your notebook (your code is autosaved when you run it), you will find your notebook file in the folder we created in step 3. This the file that you can share with others, or submit as your homework assignment to Canvas."},{"url":"docs/packages-advanced/","title":"üì¶ Packages: advanced","tags":["docs","reproducibility"],"text":"Advanced: set up an environment with  Pkg.activate Pluto‚Äôs package manager is enabled for all users, for ease of use and to promote reproducibility in scientific computing. There is no option to disable the behaviour  globally  (for your entire Pluto session). Instead, Pluto will detect notebooks that use  Pkg.activate  to set up an environment explicitly, and uses the old behaviour for those notebooks. The philosophy here is that everyone should have a reproducible package environment  by default , without having to do anything. This takes priority over other use cases, and hence  not  using the built-in package manager requires some extra work. Any notebook that calls  Pkg.activate  will not use Pluto‚Äôs package management,  and run in ‚Äòbackwards compatibility mode‚Äô. The  Pkg.activate  call should be placed directly in your notebook code: it is detecting using the same syntax analysis used for reactivity. Pattern: The ‚Äúglobal environment‚Äù If you do not intend on sharing a notebook file and you want to use your global package environment (called  (v1.6)  or similar, the one you get when you launch the Julia REPL), then you can call  Pkg.activate()  without any arguments. üôã If you are developing a package, then activating your global environment is an easy way to test your local version in Pluto. This ‚Äúglobal environment‚Äù pattern can be placed at the top of a notebook: begin\n    import Pkg\n    # careful: this is _not_ a reproducible environment\n    # activate the global environment\n    Pkg.activate()\n\n    using Plots, PlutoUI, LinearAlgebra\nend\n When running this in Pluto (try it out!), you will notice that the status marks next to packages disappear, and Pluto is running in ‚Äòbackwards compatibility mode‚Äô. Packages will no longer be installed or removed automatically, you have to use the Pkg REPL to do this yourself. Pattern: The ‚Äúshared environment‚Äù If you have multiple notebooks in a repository and you want to use share a Pkg environment between them, then you can call  Pkg.activate(path_to_environment) . You can use  @__DIR__  to get the path of the notebook‚Äôs folder, and  joinpath(@__DIR__, \"..\")  to get its parent,  joinpath(@__DIR__, \"..\", \"..\")  for the parent‚Äôs parent, etc. The function  Base.current_project()  can be used to  automatically  find the closest parent directory that contains a  Project.toml , in most cases this is what you want. For example, if your project looks like this: my_project/\n    data/\n        ...\n    notebooks/\n        Interesting analysis.jl\n        ...\n    Project.toml\n    Manifest.toml\n    ...\n then the ‚Äúshared environment‚Äù pattern can be placed at the top of a notebook: begin\n    import Pkg\n    # activate the shared project environment\n    Pkg.activate(Base.current_project())\n    # instantiate, i.e. make sure that all packages are downloaded\n    Pkg.instantiate()\n\n    using Plots, PlutoUI, LinearAlgebra\nend\n When running this in Pluto, you will notice that the status marks next to packages disappear, and Pluto is running in ‚Äòbackwards compatibility mode‚Äô. Packages will no longer be installed or removed automatically, you have to use the Pkg REPL to do this yourself. Pattern: The ‚ÄúPkg cell‚Äù When adding packages, Pluto‚Äôs default package management will always install the latest version from the registry. If you need to install a specific version or branch of a package, or a package is not registered, you can use a ‚ÄúPkg cell‚Äù. A common pattern is a so-called ‚ÄúPkg cell‚Äù, placed at the top of a notebook: begin\n    import Pkg\n    # activate a temporary environment\n    Pkg.activate(mktempdir())\n    Pkg.add([\n        Pkg.PackageSpec(name=\"Plots\", version=\"1\"),\n        Pkg.PackageSpec(name=\"PlutoUI\", version=\"0.7\"),\n    ])\n    using Plots, PlutoUI, LinearAlgebra\nend\n This will 1) activate a temporary environment using  Pkg.activate , 2) add the required packages, 3) import them with  using . When running this in Pluto (try it out!), you will notice that the status marks next to packages disappear, and Pluto is running in ‚Äòbackwards compatibility mode‚Äô. Packages will no longer be installed or removed automatically, you have to use the Pkg REPL to do this yourself. Placing all code in a single  begin  block ensures that the lines will run in the correct order. üôã You can use  this helper tool  to generate a ‚ÄúPkg cell‚Äù automatically! Advanced: edit the notebook environment Pluto.jl includes a helper function  Pluto.activate_notebook_environment  that activates a notebook Pkg environment in the REPL: julia> import Pluto\n\njulia> Pluto.activate_notebook_environment(\"~/Documents/hello.jl\")\n\njulia> ]\n\n(hello.jl) > status\n After activating a notebook environment, you can use the  Pkg REPL  to view or modify the embedded environment. Changes from either side are synchronised (i.e. Pkg REPL changes are written to the notebook, editing the notebook updates the Pkg REPL env). Watch the demo video: https://user-images.githubusercontent.com/6933510/111483040-b9c9ee80-8734-11eb-97bc-f51703fc57cc.mov"},{"url":"docs/packages/","title":"üì¶ Packages","tags":["docs","reproducibility"],"text":"Pluto‚Äôs built-in  package management Starting with version 0.15, Pluto has a  built-in  package manager, which means: üéà Packages are  automatically installed  when you use  import  or  using . üéà Your package environment is  stored inside the notebook file . When someone else opens your notebook with Pluto, the exact same package environment will be used, and packages will work on their computer. üôã These two features are designed to make it easy to write and share  reproducible notebooks . Basic usage Installing and using packages Pluto will automatically install or remove packages while you work on your notebook. When you import a new package, Pluto will install it: üôã Most packages will write  installation instructions  in their documentation: like ‚ÄúRun  julia> ] install Example  to install  Example ‚Äù. If you are using Pluto, you can skip these instructions, and import the package directly, using  import Example  or  using Example . Logs Installing packages can take some time, especially when starting Julia for the first time. Click on the status mark next to a package to view the installation progress. You can click on the   icon to view the logs. Removing packages When you delete the code that imports a package, it will be uninstalled from the package environment. It is  recommended  to restart the notebook process afterwards to get a fresh start. Updating packages You can search for and install any available updates by clicking on the   icon. A backup of your notebook file will be created in the same folder as your notebook, in case the new versions do not work as expected. Good to know Based on Pkg Pluto‚Äôs package management is a wrapper around  Pkg.jl , Julia‚Äôs built-in package manager. Packages are installed from the  General registry . üôã You can discover all available packages on  juliahub.com . Isolated package environment Every notebook runs in its own isolated package environment. This ensures that your notebook code will not be influenced by packages installed elsewhere. (The  LOAD_PATH  is set to  [\"@\", \"@stdlib\"] .) Notebook file Pluto stores the contents of  Project.toml  and  Manifest.toml  directly in the notebook file. For forwards-backwards compatibility, this is done using two extra ‚Äúcells‚Äù at the bottom of the file, containing the two files as string literals. For example, here is a notebook that imports  HypertextLiteral  and  PlutoUI :  fonsp/Pluto file format demo.jl . üôã We encourage you to open Pluto, import some packages and look at the file! Fully reproducible environments When someone else opens your notebook for the first time, Pluto will install all required packages based on the information in the  Manifest.toml  file. This means that the exact same versions of all packages you used in the notebook will be installed, ensuring your work is fully reproducible when shared with others. Compatibility across Pluto versions When opening an old Pluto notebook that does not have embedded project files, Pluto will generate them as if you typed those imports for the first time. If a call to  Pkg.activate  is made, the notebook will run in ‚Äòbackwards compatibility mode‚Äô, using the same environment and behaviour as old Pluto versions. Compatibility across Julia versions The  Manifest.toml  is designed to be (generally)  backwards compatible : you can upgrade Julia and use an old manifest. However, the  Manifest.toml  is not always  forwards compatible : a manifest generated generated with a newer version of Julia might not run on older versions. Pluto will always try to load the embedded manifest, and if it fails, it will  discard the manifest  (leaving only  Project.toml ) and try again. This is one reason why Pluto automatically adds  [compat]  ranges for each package in the  Project.toml . Package installations are shared between environments In Julia, packages are always installed globally, while  environments  (including notebooks) only store  version information , not the package code itself. This means that multiple notebooks that use the same version of  Plots  will not lead to more disk usage or precompile time. (This is different from  venv  in Python/pip, or  node_modules  in NodeJS/npm, where every environment contains copies of package code by default.) Julia‚Äôs package manager is designed to work well with many package environments on the same computer. Of course, if different notebooks use different version of the same package, and you work on both in parallel, then source files for both versions will exist on your computer. A small price to pay for simpler reproducibility! In Julia 1.5 and 1.6, you can clean up package files that have not been used in a while using  import Pkg; Pkg.gc() . In Julia 1.7 and up, this will be done  automatically . Custom registries Pkg.jl supports additional private or public registries, which can be added in the Julia REPL with  ] registry add https://github.com/myuser/MyRegistry.git , and this is also supported by Pluto‚Äôs package managemer. However, note that registries are not stored in the  Project.toml / Manifest.toml  files, which means that other people can only open your notebook if they added the custom registry before doing so. Alternatively, you can use a ‚ÄúPkg cell‚Äù (more on this later) where you add the registry before adding packages. Learn more: advanced Pkg management"},{"url":"docs/widgets/javascript/","title":"‚ö°Ô∏è JavaScript for widgets","tags":["blog","advanced","widgets"],"text":" A Pluto.jl notebook v0.18.2 frontmatter title \"‚ö°Ô∏è JavaScript for widgets\" description \"A simple notebook demonstrating the Julia syntax essentials\" layout \"layout.jlhtml\" date \"2020 06 01\" tags \"blog\", \"advanced\", \"widgets\" using Markdown using InteractiveUtils md\" Variables We can define a variable using ` ` assignment . Then we can use its value in other expressions \" x 3 y 2x md\"By default Julia displays the output of the last operation. You can suppress the output by adding ` ` a semicolon at the end. \" md\"We can ask what type a variable has using `typeof` \" typeof y md\" Functions\" md\"We can use a short form, one line function definition for simple functions \" f x 2 x md\"Typing the function's name gives information about the function. To call it we must use parentheses \" f f 10 md\"For longer functions we use the following syntax with the `function` keyword and `end` \" function g x, y z x y return z^2 end g 1, 2 md\" For loops\" md\"Use `for` to loop through a pre determined set of values \" let s 0 for i in 1 10 s i Equivalent to s s i end s end md\"Here, `1 10` is a range representing the numbers from 1 to 10 \" typeof 1 10 md\"Above we used a `let` block to define a new local variable `s`. But blocks of code like this are usually better inside functions, so that they can be reused. For example, we could rewrite the above as follows \" function mysum n s 0 for i in 1 n s i end return s end mysum 100 md\" Conditionals `if`\" md\"We can evaluate whether a condition is true or not by simply writing the condition \" a 3 a 5 md\"We see that conditions have a Boolean `true` or `false` value. We can then use `if` to control what we do based on that value \" if a 5 \"small\" else \"big\" end md\"\"\"Note that the `if` also returns the last value that was evaluated, in this case the string `\"small\"` or `\"big\"`, Since Pluto is reactive, changing the definition of `a` above will automatically cause this to be reevaluated \"\"\" md\" Arrays\" md\" 1D arrays `Vector`s \" md\"We can make a `Vector` 1 dimensional, or 1D array using square brackets \" v 1, 2, 3 typeof v md\"The `1` in the type shows that this is a 1D array. We access elements also using square brackets \" v 2 v 2 10 md\"Note that Pluto does not automatically update cells when you modify elements of an array, but the value does change.\" md\"A nice way to create `Vector`s following a certain pattern is to use an array comprehension \" v2 i^2 for i in 1 10 md\" 2D arrays matrices \" md\"We can make small matrices 2D arrays with square brackets too \" M 1 2 3 4 typeof M md\"The `2` in the type confirms that this is a 2D array.\" md\"This won't work for larger matrices, though. For that we can use e.g.\" zeros 5, 5 md\"Note that `zeros` gives `Float64`s by default. We can also specify a type for the elements \" zeros Int, 4, 5 md\"We can then fill in the values we want by manipulating the elements, e.g. with a `for` loop.\" md\"A nice alternative syntax to create matrices following a certain pattern is an array comprehension with a double `for` loop \" i j for i in 1 5, j in 1 6 md\"\"\" Acknowledgement \"\"\" Markdown.MD Markdown.Admonition \"warning\", \"This notebook is taken from\", md\"\"\" Computational Thinking , a live online Julia Pluto textbook. computationalthinking.mit.edu https computationalthinking.mit.edu , original notebook https github.com mitmath 18S191 blob Fall20 lecture notebooks Basic%20Julia%20syntax.jl \"\"\" using PlutoUI TableOfContents "},{"url":"examples/how are you/","title":"Basic syntax","tags":["blog"],"text":" A Pluto.jl notebook v0.18.2 frontmatter title \"Basic syntax\" description \"A simple notebook demonstrating the Julia syntax essentials\" layout \"layout.jlhtml\" date \"2020 06 01\" tags \"blog\" using Markdown using InteractiveUtils md\" Variables We can define a variable using ` ` assignment . Then we can use its value in other expressions \" x 3 y 2x md\"By default Julia displays the output of the last operation. You can suppress the output by adding ` ` a semicolon at the end. \" md\"We can ask what type a variable has using `typeof` \" typeof y md\" Functions\" md\"We can use a short form, one line function definition for simple functions \" f x 2 x md\"Typing the function's name gives information about the function. To call it we must use parentheses \" f f 10 md\"For longer functions we use the following syntax with the `function` keyword and `end` \" function g x, y z x y return z^2 end g 1, 2 md\" For loops\" md\"Use `for` to loop through a pre determined set of values \" let s 0 for i in 1 10 s i Equivalent to s s i end s end md\"Here, `1 10` is a range representing the numbers from 1 to 10 \" typeof 1 10 md\"Above we used a `let` block to define a new local variable `s`. But blocks of code like this are usually better inside functions, so that they can be reused. For example, we could rewrite the above as follows \" function mysum n s 0 for i in 1 n s i end return s end mysum 100 md\" Conditionals `if`\" md\"We can evaluate whether a condition is true or not by simply writing the condition \" a 3 a 5 md\"We see that conditions have a Boolean `true` or `false` value. We can then use `if` to control what we do based on that value \" if a 5 \"small\" else \"big\" end md\"\"\"Note that the `if` also returns the last value that was evaluated, in this case the string `\"small\"` or `\"big\"`, Since Pluto is reactive, changing the definition of `a` above will automatically cause this to be reevaluated \"\"\" md\" Arrays\" md\" 1D arrays `Vector`s \" md\"We can make a `Vector` 1 dimensional, or 1D array using square brackets \" v 1, 2, 3 typeof v md\"The `1` in the type shows that this is a 1D array. We access elements also using square brackets \" v 2 v 2 10 md\"Note that Pluto does not automatically update cells when you modify elements of an array, but the value does change.\" md\"A nice way to create `Vector`s following a certain pattern is to use an array comprehension \" v2 i^2 for i in 1 10 md\" 2D arrays matrices \" md\"We can make small matrices 2D arrays with square brackets too \" M 1 2 3 4 typeof M md\"The `2` in the type confirms that this is a 2D array.\" md\"This won't work for larger matrices, though. For that we can use e.g.\" zeros 5, 5 md\"Note that `zeros` gives `Float64`s by default. We can also specify a type for the elements \" zeros Int, 4, 5 md\"We can then fill in the values we want by manipulating the elements, e.g. with a `for` loop.\" md\"A nice alternative syntax to create matrices following a certain pattern is an array comprehension with a double `for` loop \" i j for i in 1 5, j in 1 6 md\"\"\" Acknowledgement \"\"\" Markdown.MD Markdown.Admonition \"warning\", \"This notebook is taken from\", md\"\"\" Computational Thinking , a live online Julia Pluto textbook. computationalthinking.mit.edu https computationalthinking.mit.edu , original notebook https github.com mitmath 18S191 blob Fall20 lecture notebooks Basic%20Julia%20syntax.jl \"\"\" using PlutoUI TableOfContents "}]