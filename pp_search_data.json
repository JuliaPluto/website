[{"url":".","title":"index","tags":["welcome"],"text":""},{"url":"sidebar data/","title":"sidebar data","tags":[],"text":"Dict \"en\" Dict \"docs\" \"Introduction\" collections \"docs\" .pages ∩ collections \"introduction\" .pages, \"Reproducibility\" collections \"docs\" .pages ∩ collections \"reproducibility\" .pages, \"Publishing\" collections \"docs\" .pages ∩ collections \"publishing\" .pages, \"Advanced Widgets\" collections \"docs\" .pages ∩ collections \"advanced\" .pages ∩ collections \"widgets\" .pages, \"Advanced Internals\" collections \"docs\" .pages ∩ collections \"advanced\" .pages ∩ collections \"internals\" .pages, , \"examples\" \"Getting started\" collections \"examples\" .pages, , "},{"url":"en/docs/AbstractPlutoDingetjes/","title":"AbstractPlutoDingetjes.jl – develop enhanced Pluto widgets","tags":["docs","widgets","AbstractPlutoDingetjes","advanced"],"text":" A Pluto.jl notebook v0.19.40 frontmatter image \"https media.giphy.com media l3vRfDn9ca5PVkHv2 giphy.gif\" title \"AbstractPlutoDingetjes.jl – develop enhanced Pluto widgets\" layout \"docsnotebook.jlmd\" tags \"docs\", \"widgets\", \"AbstractPlutoDingetjes\", \"advanced\" date \"2023 11 21\" description \"AbstractPlutoDingetjes allows you to write more advanced widgets to be used inside Pluto.jl.\" license \"Unlicense\" frontmatter.author name \"Pluto.jl\" url \"https github.com JuliaPluto\" using Markdown using InteractiveUtils using AbstractPlutoDingetjes md\"\"\" AbstractPlutoDingetjes.jl \"\"\" Docs.Binding AbstractPlutoDingetjes, AbstractPlutoDingetjes md\"\"\" https media.giphy.com media l3vRfDn9ca5PVkHv2 giphy.gif \"\"\" md\"\"\" AbstractPlutoDingetjes.Bonds \"\"\" Docs.Binding AbstractPlutoDingetjes.Bonds, initial value Docs.Binding AbstractPlutoDingetjes.Bonds, transform value Docs.Binding AbstractPlutoDingetjes.Bonds, possible values Docs.Binding AbstractPlutoDingetjes.Bonds, NotGiven Docs.Binding AbstractPlutoDingetjes.Bonds, InfinitePossibilities Docs.Binding AbstractPlutoDingetjes.Bonds, validate value md\"\"\" AbstractPlutoDingetjes.Display \"\"\" Docs.Binding AbstractPlutoDingetjes.Display, published to js Docs.Binding AbstractPlutoDingetjes.Display, with js link md\"\"\" Extras \"\"\" Docs.Binding AbstractPlutoDingetjes, is supported by display Docs.Binding AbstractPlutoDingetjes, is inside pluto import PlutoUI PlutoUI.TableOfContents include definitions true pkgversion AbstractPlutoDingetjes "},{"url":"en/docs/ExpressionExplorer/","title":"ExpressionExplorer.jl – documentation ","tags":["docs","internals","reactivity","advanced","ExpressionExplorer"],"text":" A Pluto.jl notebook v0.19.41 frontmatter image \"https media.giphy.com media 242BaXJnCfe7hOVrsE giphy.gif\" title \"ExpressionExplorer.jl – documentation \" layout \"docsnotebook.jlmd\" license \"MIT\" description \"Find all variables referenced and assigned in a Julia expression. Used internally by Pluto.jl.\" tags \"docs\", \"internals\", \"reactivity\", \"advanced\", \"ExpressionExplorer\" date \"2023 10 31\" frontmatter.author name \"Pluto.jl\" url \"https github.com JuliaPluto\" using Markdown using InteractiveUtils using PlutoUI TableOfContents using ExpressionExplorer Markdown.parse read joinpath pkgdir ExpressionExplorer , \"README.md\" , String "},{"url":"en/docs/PlutoDependencyExplorer/","title":"PlutoDependencyExplorer.jl – documentation","tags":["docs","PlutoDependencyExplorer","internals","reactivity","ExpressionExplorer","advanced"],"text":" A Pluto.jl notebook v0.19.41 frontmatter image \"https media.giphy.com media 242BaXJnCfe7hOVrsE giphy.gif\" title \"PlutoDependencyExplorer.jl – documentation\" date \"2024 01 21\" license \"Unlicense\" description \"Given a list of cell codes, PlutoDependencyExplorer can tell you in which order these cells should run. Used internally by Pluto.jl.\" tags \"docs\", \"PlutoDependencyExplorer\", \"internals\", \"reactivity\", \"ExpressionExplorer\", \"advanced\" layout \"docsnotebook.jlmd\" frontmatter.author name \"Pluto.jl\" url \"https github.com JuliaPluto\" using Markdown using InteractiveUtils using PlutoDependencyExplorer using PlutoUI TableOfContents include definitions true md\"\"\" PlutoDependencyExplorer.jl \"\"\" Docs.Binding PlutoDependencyExplorer, PlutoDependencyExplorer md\"\"\" Basic example Let's define our \"notebook\", which is just a list of cells \"\"\" const PDE PlutoDependencyExplorer struct SimpleCell PDE.AbstractCell code end notebook SimpleCell. \"x y\" \"x 1\" \"y x 2\" md\"\"\" Next, we want to calculate its toplogy , this is the dependency graph of the notebook all links between cells. \"\"\" empty topology PDE.NotebookTopology SimpleCell topology PDE.updated topology empty topology, notebook, notebook get code str c c.code, get code expr c Meta.parse c.code , md\"\"\" info When reading this notebook, you can click on the data structures in the cells above to expand their tree viewer \"\"\" md\"\"\" Now that we have the topology, we can order cells in the topology. \"\"\" order PDE.topological order topology md\"\"\" The result contains an ordered list of the notebook cells \"\"\" order.runnable md\"\"\" You can also ask PlutoDependencyExplorer which cells should run if one cell re runs. This is a recursive search. For example, if I re run the cell that defines `y` \"\"\" notebook 3 PDE.topological order topology, notebook 3 .runnable md\"\"\" By the way, you can also ask PlutoDependencyExplorer which cell defines `y` \"\"\" PDE.where assigned topology, Set y md\"\"\" Core concepts Let's dig deeper into the Basic example above. The first thing we did was define our own subtype of `PlutoDependencyExplorer.AbstractCell`. \"\"\" Docs.Binding PDE, AbstractCell md\"\"\" Next, we calculated the notebook's topology , which stored as a `NotebookTopology`. \"\"\" Docs.Binding PDE, NotebookTopology md\"\"\" We calculated the topology by first creating an empty one, and then updating it with all the cells in our notebook. `NotebookTopology`s are always created by updating a previous one. This is done with `updated topology` \"\"\" Docs.Binding PDE, updated topology md\"\"\" info For the initial topology calculation in our example, we passed `notebook` as `notebook cells`, but also as `updated cells`. This tells `updated topology` that all cells are new. \"\"\" md\"\"\" When the notebook is changed later, you can use `updated topology` to calculate a new topology, which will use the old topology as a cache for cells that were not updated. \"\"\" md\"\"\" More API The following API is public, and covered by our semver vesrion numbering. These functions are used by Pluto and can be used by other packages , but might not be fully documented. We currently don't have the capacity https opencollective.com julialang projects juliapluto to document everything, but you can always take a look at Pluto's source for an example of how these functions are used, or you can contact us. \"\"\" md\" More basics\" Docs.Binding PDE, where assigned Docs.Binding PDE, where referenced Docs.Binding PDE, all cells md\" Disabled & resolved\" Docs.Binding PDE, is disabled Docs.Binding PDE, is resolved Docs.Binding PDE, set unresolved md\" Misc\" Docs.Binding PDE, exclude roots Docs.Binding PDE, is soft edge md\" Cell precedence heuristic\" Docs.Binding PDE, cell precedence heuristic Docs.Binding PDE, DEFAULT PRECEDENCE HEURISTIC md\"\"\" Reactivity error types These types are possible value types of the `TopologicalOrder.errable` field. \"\"\" Docs.Binding PDE, ReactivityError Docs.Binding PDE, CyclicReferenceError Docs.Binding PDE, MultipleDefinitionsError md\"\"\" Data structures We defined immutable versions of some core data structures. \"\"\" Docs.Binding PDE, ImmutableDefaultDict Docs.Binding PDE, ImmutableSet Docs.Binding PDE, ImmutableVector Docs.Binding PDE, setdiffkeys Docs.Binding PDE, delete unsafe md\"\"\" ExpressionExplorerExtras These are some things that are too Pluto specific to go into ExpressionExplorer.jl, but are available through PDE as public API in the submodule `ExpressionExplorerExtras`. \"\"\" const EEE PlutoDependencyExplorer.ExpressionExplorerExtras Docs.Binding EEE, ExpressionExplorerExtras Docs.Binding EEE, can be function wrapped Docs.Binding EEE, can macroexpand Docs.Binding EEE, can macroexpand no bind Docs.Binding EEE, collect implicit usings Docs.Binding EEE, maybe macroexpand pluto Docs.Binding EEE, pretransform pluto pkgversion PlutoDependencyExplorer "},{"url":"en/docs/advanced-widgets/","title":"Advanced widgets – overview","tags":["docs","advanced","widgets","AbstractPlutoDingetjes","JavaScript"],"text":" A Pluto.jl notebook v0.19.42 frontmatter image \"https github.com fonsp Pluto.jl assets 6933510 0a27e62f 6ef1 4f13 b47c 2a2cefa8850a\" order \"0\" title \"Advanced widgets – overview\" date \"2024 04 22\" tags \"docs\", \"advanced\", \"widgets\", \"AbstractPlutoDingetjes\", \"JavaScript\" description \"Pluto provides a framework for advances input and display widgets.\" layout \"docsnotebook.jlmd\" license \"Unlicense\" frontmatter.author name \"Pluto.jl\" url \"https github.com JuliaPluto\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end using HypertextLiteral using PlutoUI md\"\"\" Developing advanced widgets for Pluto Pluto has a number of advanced features for developers who want to create complex widgets for Pluto. Let's define some categories Custom inputs widgets that are used with ` bind`, like a slider or a map location picker. Custom outputs for visualising results, like a plot or a map with labels. \"\"\" TableOfContents include definitions true md\"\"\" Custom input PlutoUI.jl provides some basic inputs, like sliders, textfields and more. But you can also make your own specialised widget For example, you could make a map location picker https github.com lukavdplas PlutoMapPicker.jl , showing a map, and giving back the clicked coordinate with ` bind`. screenshot https github.com lukavdplas PlutoMapPicker.jl raw main screenshot.png chemical equation builder https youtu.be lNbU5jNp67s?t 1546 , giving back a `Catalyst.ReactionSystem` with ` bind`. screenshot https github.com fonsp Pluto.jl assets 6933510 0a27e62f 6ef1 4f13 b47c 2a2cefa8850a widget composed with Markdown and PlutoUI, giving back 4 values in a tuple with ` bind`. screenshot https user images.githubusercontent.com 6933510 145588612 14824654 5c73 45f8 983c 8913c7101a78.png \"\"\" md\"\"\" No JavaScript Composing widgets Some widgets can be written as a combination of existing inputs, and static content like text, styles, layout and images. This means that you can make simple widgets using only Julia and HTML or Markdown, without JavaScript. For this, you can use `PlutoUI.combine` combine `PlutoUI.Experimental.transformed value` transformed value In some cases, you might just want to \"wrap\" and existing widget in static content `PlutoUI.Experimental.wrapped` wrapped Widgets created with these methods can be published in a package \"\"\" Docs.Binding PlutoUI, combine Docs.Binding PlutoUI.Experimental, transformed value Docs.Binding PlutoUI.Experimental, wrapped md\"\"\" Custom inputs with JavaScript The Pluto developers 💖💖💖 love JavaScript And Pluto also provides a first class framework for writing widgets using JavaScript. Preliminary writing JavaScript Before reading further, make sure that you understand the basics of writing JavaScript inside Pluto, and that you know how to debug the web using the DevTools of your favourite browser. To learn more, take a look at the featured notebooks https featured.plutojl.org about \"Pluto and the Web\", and read the documentation about our JavaScript API https plutojl.org en docs javascript api . Preliminary `type show htl` Here is the core recipe to use when writing your own widgets 1. Define a type 2. Define a `Base.show` method for HTML 3. Use `HypertextLiteral. htl` to write your widget, using the `io` from `show`. This should be the minimal template for every widget that you write. ```julia import HypertextLiteral htl begin struct MyCoolSlider min Real max Real end function Base.show io IO, m MIME\"text html\", d MyCoolSlider show io, m, htl \"\\\"\" input type range min d.min max d.max \"\"\\\" end end ``` ```julia use it like so bind value MyCoolSlider 5, 10 ``` Let's see it in action \"\"\" import HypertextLiteral htl begin struct MyCoolSlider min Real max Real end function Base.show io IO, m MIME\"text html\", d MyCoolSlider show io, m, htl \"\"\" input type range min d.min max d.max \"\"\" end end bind value MyCoolSlider 5, 10 value md\"\"\" It works Pluto renders your widget by calling the `Base.show` method, and displaying that in the page , it then finds the first element ` input ... ` . Pluto adds an event listener to the `\"input\"` event, and when fired or when first rendered , Pluto takes the `.value` property, sends it to Julia, and it becomes your bound variable. \"\"\" md\"\"\" Core concepts `currentScript`, `value`, input event The widget above `MyCoolSlider` works because the `input` element fires an `\"input\"` event when moved, and it has a `.value` property. This is true for all the built in ` input ... ` elements https developer.mozilla.org en US docs Web HTML Element input . Now... when writing your own inputs, you need to fake it Set the `.value` property from JavaScript, and fire an `\"input\"` event. To select the element, `currentScript` is special API added by Pluto, it refers to the ` script ` element that your code is written in. In the example below, our custom input element is a wrapper ` div `, and we use JavaScript to select it with `currentScript.parentElement`, to set its `value` and to fire the `\"input\"` event. 👉 Can you find this in the code? \"\"\" begin struct RectangleDrawing end function Base.show io IO, m MIME\"text html\", rd RectangleDrawing Base.show io, m, htl \"\"\" div canvas width \"200\" height \"200\" style \"position relative\" canvas script 🐸 `currentScript` is the current script tag we use it to select elements 🐸 const div currentScript.parentElement const canvas div.querySelector \"canvas\" const ctx canvas.getContext \"2d\" var startX 80 var startY 40 function onmove e 🐸 We send the value back to Julia 🐸 div.value e.layerX startX, e.layerY startY div.dispatchEvent new CustomEvent \"input\" ctx.fillStyle ' ffecec' ctx.fillRect 0, 0, 200, 200 ctx.fillStyle ' 3f3d6d' ctx.fillRect startX, startY, ...div.value canvas.onpointerdown e startX e.layerX startY e.layerY canvas.onpointermove onmove canvas.onpointerup e canvas.onpointermove null Fire a fake pointermoveevent to show something onmove layerX 130, layerY 160 script div \"\"\" end end md\"\"\" Try dragging a rectangle in the box below \"\"\" bind dims RectangleDrawing dims md\"\"\" Custom output Pluto can be used as a framework to have high quality widgets powered by JavaScript, displaying data and calculations from Julia. By creating a Custom output , you can wrap your JavaScript powered widget into a Julia function, such as `plot data `. Techniques used to power Custom Outputs can also be used in Custom Inputs A Custom Input is just a Custom Output with added ` bind` support. \"\"\" md\"\"\" Core principle a visualiser function TODO \"\"\" md\"\"\" Julia only Layout You can use `PlutoUI.ExperimentalLayout` to display objects in columns, grids, and more. This lets you put plots next to sliders, text and more. \"\"\" PlutoUI.ExperimentalLayout.grid md\" Layout demo \" Text \"\" Text \"I'm on the left\" Dict a 1, b 2,3 md\"\"\" Combining bonds and outputs When you want to put a bond and an output in the same cell like a slider next to a plot , you need to take special care. You need to define the bond in a separate cell , like so \"\"\" bond bind val Slider 1 20 PlutoUI.ExperimentalLayout.hbox bond, collect 1 val md\"\"\" Special features Using `PlutoUI.ExperimentalLayout` has some special advantages over using ` htl` or another HMTL based method to create layout Pluto treats each item as its own display. So a 2x2 `grid` will act like 4 individual Pluto cells arranged in a grid. In particular, if some of the items in a layout change, then only those items will be re rendered. Items that stayed the same will be unaffected. For bonds, this means that they will not re render and get reset to their initial value. When using HTML and JavaScript, this means that if your `Base.show` method returns exactly the same value, the re render will not be trigger, and ` script `s don't execute again. \"\"\" md\"\"\" HTML HypertextLiteral and alternatives You can achieve the best results when using HTML, CSS and JavaScript to power your widgets. This gives you full control over appearance and behaviour. To use HTML inside a `Base.show` function, we highly recommend ` htl` from HypertextLiteral.jl https github.com JuliaPluto HypertextLiteral.jl , a package developed in collaboration with the Pluto developers, but also useful outside of Pluto. It's a small dependency, and it gives optimal performance. Another option is HyperScript.jl https github.com JuliaWeb Hyperscript.jl , which provides a \"Julia API to HTML\", whereas HypertextLiteral is closer to HTML itself. You could also use no package, and use `write io, \" div ...\" ` calls to output HTML without a package. For small widgets this will work well, but we would recommend starting with HypertextLiteral give more flexibility later, with little cost. \"\"\" function emoji list xs Vector Integer htl \"\"\" ol htl \" li repeat \"🌸\",x li \" for x in xs ol \"\"\" end emoji list 5,10,3,2,1 html\"\"\" a href \"https github.com JuliaPluto HypertextLiteral.jl\" class \"arrow\" Learn more HypertextLiteral.jl a \"\"\" md\"\"\" JavaScript API ` script ` tags included in HTML output will be executed by Pluto, and you can use this to make interactive and dynamic widgets In your code, you will mostly be using Web APIs your code runs directly in the browser , like DOM manipulation. Use javascript.info https javascript.info or MDN https developer.mozilla.org to learn more about Web APIs. You can also import JavaScript libraries and frameworks and use them in your widget. We think the Web APIs and modern JavaScript are very powerful, and you should be able to do anything you want However, we decided to add a small amount of extra functionality to make it easier to write code specifically for Pluto outputs. \"\"\" html\"\"\" a href \"https plutojl.org en docs javascript api \" class \"arrow\" Learn more JavaScript API a \"\"\" md\"\"\" `AbstractPlutoDingetjes.jl` We recommend reading the docs of `AbstractPlutoDingetjes` https plutojl.org en docs abstractplutodingetjes , containing special API that we offer on top of the Web platform. In particular, I want to highlight two functions for special data needs Use `AbstractPlutoDingetjes.Display.published to js` when visualising a large amount of data using JavaScript, and just interpolating the data into a ` script ` in an `HypertextLiteral. htl` expression is not performant enough. ```julia HypertextLiteral. htl \"\"\\\" script the standard way, fast for small amounts of data let x \\ my vector this is faster for large data let y \\ AbstractPlutoDingetjes.Display.published to js my big vector script \"\\\"\" ``` \"\"\" md\"\"\" Use `AbstractPlutoDingetjes.Display.with js link` when you want to make on demand requests to Julia from your JavaScript code. \"\"\" md\"\"\" If you create a widget with HTML JS for multiple environments VS Code, Jupyter, Documenter, Franklin, Bonito, Genie, etc , it can be useful to check whether the widget is being displayed in Pluto or not. We recommend performing this check inside the `Base.show io IO, m MIME\"text html\", ... ` method, using like `is inside pluto io IO ` to check for Pluto, or `is supported by display` to check for a specific Pluto feature. \"\"\" html\"\"\" a href \"https plutojl.org en docs abstractplutodingetjes \" class \"arrow\" Find more in the AbstractPlutoDingetjes docs a \"\"\" md\"\"\" Distributing widgets Once you created a cool widget, the most user friendly way to distribute it is to publish it in a package . You can create a new package with your widget, or you can add it to an existing package. Dependencies When distributing a widget in a package ExampleWidget.jl , you do not need to add Pluto.jl as a dependency to your Project.toml. You just need to add the packages that you used. This could be HypertextLiteral.jl or AbstractPlutoDingetjes.jl. If you used `combine` or another PlutoUI feature, you add PlutoUI.jl as a dependency. HypertextLiteral.jl and especially AbstractPlutoDingetjes.jl are very small dependencies and will not add any noticeable lag to your package installation. Code in notebook or Julia file? When prototyping your widget, you probably want to work fully inside a notebook. Tip when editing the notebook, copy the `localhost` URL and open it in a second window. That way you can see the code and widget side by side. Once you're done, you have two options for moving it to a package. First, you could store your notebook file directly in the package source code. Use the \"Disable in File\" feature to disable cells where you test your widget. https github.com JuliaPluto AbstractPlutoDingetjes.jl assets 6933510 f96980ff 83ce 4b15 8897 dc3e3b1ba72e Second, you could move your code to a classic `.jl` file. Then you could use Revise.jl or ` revise` from PlutoLinks.jl https github.com JuliaPluto PlutoLinks.jl to test it in a notebook while developing the widget. This option might be nicer if your widget has a lot of JavaScript code. Publishing small packages? If you just created one cool widget, you might think \"I want to publish this, but it's too small for a package \". Here is a little political message from fons do it anyways Life is too short to not publish small packages If you made something fun or valuable, you totally deserve to publish it and share it with others. 💛 It's really valuable for others, and a cool experience for you Publishing a widget in a small package is really valuable Others can use it by simply typing `import ExampleWidget` in a notebook . Without publishing it on General, users need to download scripts, copy code, ... This creates lots of hard to reproduce notebooks Once it's on the registry, it's easier for people to discover Especially if the name starts with `Pluto`, like PlutoMapPicker.jl. People searching for your widget can find it online, because registered package show up on juliahub.com and more. It's easy to get feedback, bug reports and contributions from users. And you can easily make patches and release them to your users. Or maybe it was right from the start, and you don't need this \"\"\" demo img let url \"https user images.githubusercontent.com 6933510 116753174 fa40ab80 aa06 11eb 94d7 88f4171970b2.jpeg\" data read download url PlutoUI.Show MIME\"image jpg\" , data end demo html htl \" b style 'font family cursive ' Hello b \" md\"\"\" Embeddable output Pluto has a multimedia object viewer, which is used to display the result of a cell's output. Depending on the type of the resulting object, the richest possible viewer is used. This includes an interactive structure viewer for arrays, tables, dictionaries and more embed display 1,2, a 3, b 4 an ` img ` tag with optimized data transfer for images embed display demo img raw HTML for HTML showable objects embed display demo html Normally, you get this object viewer for the output of a cell. However, as demonstrated in the list above, you can also embed Pluto's object viewer in your own HTML . To do so, Pluto provides a function ```julia embed display x ``` Example As an example, here is how you display two arrays side by side ```julia htl \"\\\"\" div style \"display flex \" embed display rand 4 embed display rand 4 div \"\\\"\" ``` Currently, you use this function with `PlutoRunner.embed display` or just `embed display`. In the future, this will be `AbstractPlutoDingetjes.Display.embed display`, please comment this PR https github.com JuliaPluto AbstractPlutoDingetjes.jl pull 9 if you want it You can learn more https github.com fonsp Pluto.jl pull 1126 about how this feature works, or how to use it inside packages. \"\"\" import AbstractPlutoDingetjes Docs.Binding AbstractPlutoDingetjes.Display, published to js Docs.Binding AbstractPlutoDingetjes.Display, with js link Docs.Binding AbstractPlutoDingetjes, is inside pluto Docs.Binding AbstractPlutoDingetjes, is supported by display "},{"url":"en/docs/configuration/","title":"⚙️ Configuring Pluto","tags":["docs","introduction"],"text":" A Pluto.jl notebook v0.19.41 frontmatter title \"⚙️ Configuring Pluto\" date \"2024 04 22\" tags \"docs\", \"introduction\" description \"How to change settings of the Pluto.jl Julia notebook\" layout \"docsnotebook.jlmd\" license \"MIT\" frontmatter.author name \"Pluto.jl\" url \"https github.com JuliaPluto\" using Markdown using InteractiveUtils begin import Pkg pde joinpath pwd , \"..\", \"..\", \"..\", \"pluto deployment environment\" if isdir pde Pkg.activate pde, io devnull Pkg.instantiate io devnull else warn \"Notebook launched outside of plutojl.org website repository... Installing Pluto from registry.\" Pkg.activate temp true Pkg.add \"Pluto\", \"PlutoUI\" end import Pluto, PlutoUI using HypertextLiteral end PlutoUI.TableOfContents include definitions true md\"\"\" Configuring Pluto In Pluto's design, we always try our best to make choices that work best for our audience, rather than adding more settings. We do this to make Pluto less intimidating to use for newcomers, and to avoid situations where issues are caused by a \"wrong configuration\". However, there are some settings intended for system administrators e.g. running a Pluto server for your students , and for advanced Julia users . These settings are mostly about the \"backend\" everything you don't see . We intentionally don't have settings for the \"frontend\" the GUI interface where you type code and see results . Such settings are usually more difficult to implement and maintain. In some cases, we also want to create a homogenous experience a notebook should look the same on different computers. The best configuration We thought long and hard to find the best default configuration. To get the best Pluto experience, don't change these settings . A custom experience You can achieve a lot of customisability by writing special code Take a look at PlutoLinks.jl https github.com JuliaPluto PlutoLinks.jl , PlutoHooks.jl https github.com JuliaPluto PlutoLinks.jl and AbstractPlutoDingetjes.jl https plutojl.org en docs abstractplutodingetjes . You can also use CSS e.g. with HypertextLiteral.jl https github.com JuliaPluto HypertextLiteral.jl to customise the look of a notebook. \"\"\" md\"\"\" How to use settings Option 1 `Pluto.run kwargs... ` The easiest way to configure Pluto is by providing keyword arguments to `Pluto.run`. For example, to configure the port used to run Pluto ```julia Pluto.run port 1235 ``` \"\"\" md\"\"\" Option 2 `Pluto.ServerSession` You can also create a session first, configure it, and then run a server on that session. ```julia session Pluto.ServerSession session.options.server.auto reload from file true session.options.server.optimize 0 Pluto.run session ``` \"\"\" begin categories CompilerOptions, ServerOptions, SecurityOptions, EvaluationOptions, end md\"\"\" Configuration options Pluto's settings are divided into length categories categories \"\"\" htl \"\"\" ul map categories do c htl \" li a href string \" \", c c a li \" end ul \"\"\" Docs.Binding Pluto.Configuration, categories 1 Docs.Binding Pluto.Configuration, categories 2 Docs.Binding Pluto.Configuration, categories 3 Docs.Binding Pluto.Configuration, categories 4 "},{"url":"en/docs/","title":"🙋 Introduction","tags":["docs","introduction"],"text":"Welcome to Pluto! Welcome to the docs! We are still working on this website ☺️"},{"url":"en/docs/install/","title":"🌼 How to install","tags":["docs","introduction"],"text":"Install Pluto on your own computer Go to  plutojl.org/#install  for instructions! System requirements Pluto works on Windows, Linux, MacOS, ChromeOS and Android. You need a computer with at least  4GB RAM , but 8GB is recommended for running multiple notebooks in parallel, or for using large packages. Pluto needs  Julia  to be installed, we recommend the latest version. Unreleased (alpha/beta preview) versions of Julia do not work well with Pluto. Pluto also needs a  web browser  to work. Make sure that your web browser is up-to-date, as Pluto uses many modern web technologies to work. Some browser extensions can break Pluto, such as Privacy Badger. You can disable these extensions for the Pluto domain (usually  http://localhost:1234/ ). You do not need to be a  system administrator  to install Julia and Pluto. ChromeOS Pluto works on a chromebook! You need to set up the  Linux development environment , and then follow the Linux installation instructions as usual! iPad and iOS It is not possible to run Julia on iPad or iOS (we think)… But you could run Pluto on another computer or a web server, and access Pluto remotely on your iPad or iOS phone. Try Pluto without installation You can try Pluto in your browser without installation before installing! Go to  plutojl.org/#try  to learn more. Note that your files will not be stored in the cloud! Use Pluto in the cloud If you want to use Pluto without installation for more serious projects, there are a couple of options: Jolin Cloud  – jolin.io offers a cloud service for Pluto notebooks, with additional real-time data features JuliaHub  – see the  documentation CoCalc  – see the  documentation With these three options you can  store notebooks in the cloud , and you can also try  bigger computers  and  GPUs . Jolin and JuliaHub also let you publish notebooks as public/private websites."},{"url":"en/docs/javascript-api/","title":"JavaScript API","tags":["javascript","web","widgets","advanced","docs"],"text":" A Pluto.jl notebook v0.19.41 frontmatter license url \"https github.com JuliaPluto featured blob 2a6a9664e5428b37abe4957c1dca0994f4a8b7fd LICENSES Unlicense\" image \"https upload.wikimedia.org wikipedia commons 9 99 Unofficial JavaScript logo 2.svg\" order \"3\" title \"JavaScript API\" tags \"javascript\", \"web\", \"widgets\", \"advanced\", \"docs\" license \"Unlicense\" description \"Use JavaScript to make your own interactive visualizations \" date \"2024 04 24\" layout \"docsnotebook.jlmd\" frontmatter.author name \"Pluto.jl\" url \"https github.com JuliaPluto\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end using HypertextLiteral using PlutoUI md\"\"\" JavaScript API ` script ` tags included in HTML output will be executed by Pluto, and you can use this to make interactive and dynamic widgets In your code, you will mostly be using Web APIs your code runs directly in the browser , like DOM manipulation. Use javascript.info https javascript.info or MDN https developer.mozilla.org to learn more about Web APIs. You can also import JavaScript libraries and frameworks and use them in your widget. We think the Web APIs and modern JavaScript are very powerful, and you should be able to do anything you want However, we decided to add a small amount of extra functionality to make it easier to write code specifically for Pluto outputs. \"\"\" md\"\"\" Debugging The HTML, CSS and JavaScript that you write run in the browser, so you should use the browser's built in developer tools https developer.mozilla.org en US docs Learn Common questions What are browser developer tools to debug your code. Check to make sure that you are able to debug JavaScript code \"\"\" htl \"\"\" script console.info \"Can you find this message in the console?\" script \"\"\" md\"\"\" And HTML and CSS \"\"\" htl \"\"\" style .cool class font size 1.3rem color purple background lightBlue padding 1rem border radius 1rem style div class \"cool class\" Can you find out which CSS class this is? div \"\"\" html\" span id currentScript \" md\"\"\" `currentScript` – Selecting elements When writing the javascript code for a widget, it is common to select elements inside the widgets to manipulate them. In the number of clicks example above, we selected the ` span ` and ` button ` elements in our code, to trigger the input event, and attach event listeners, respectively. There are a numbers of ways to do this, and the recommended strategy is to create a wrapper ` span `, and use `currentScript.parentElement` to select it . `currentScript` When Pluto runs the code inside ` script ` tags, it assigns a reference to that script element to a variable called `currentScript`. You can then use properties like `previousElementSibling` or `parentElement` to \"navigate to other elements\". Let's look at the \"wrapper span strategy\" again. ```htmlmixed htl \"\\\"\" the wrapper span span button id \"first\" Hello button button id \"second\" Julians button script const wrapper span currentScript.parentElement we can now use querySelector to select anything we want const first button wrapper span.querySelector \"button first\" console.log first button script span \"\\\"\" ``` \"\"\" md\"\"\" Why not just select on `document.body`? In the example above, it would have been easier to just select the button directly, using ```javascript ⛔ do no use const first button document.body.querySelector \"button first\" ``` However, this becomes a problem when combining using the widget multiple times in the same notebook , since all selectors will point to the first instance. Similarly, try not to search relative to the ` pluto cell ` or ` pluto output ` element, because users might want to combine multiple instances of the widget in a single cell. \"\"\" html\"\"\" span id value span span id input span span id bond span \"\"\" md\"\"\" `value` – Custom ` bind` value You can use JavaScript to write input widgets to be used with Pluto's ` bind`. The `input` event can be triggered on any object using ```javascript obj.value ... obj.dispatchEvent new CustomEvent \"input\" ``` For example, here is a button widget that will send the number of times it has been clicked as the bound value \"\"\" bind hello htl \"\"\" div button Click me button script let val 0 const div currentScript.parentElement const button div.querySelector \"button\" button.addEventListener \"click\", 🐸 Set the value of the div element and trigger an event 🐸 div.value val div.dispatchEvent new CustomEvent \"input\" script div \"\"\" hello md\"\"\" Default value `missing` When you write ` bind x Widget ` in your notebook, what is the initial value of `x`? By default, the macro ` bind` will set `x` to `missing` https docs.julialang.org en v1 manual missing , which will be the value of `x` while other cells are also running. Once all cells completed running, your browser can send the `.value` that it got from JavaScript, and cells that depend on `x` will run again with the value. These messages were debounced while cells were running, see section below. This means that simple JavaScript powered custom ` bind` widgets will trigger two runs when used in a notebook a first run with value `missing`, and a second run with the first value from JavaScript. `AbstractPlutoDingetjes.Bonds.initial value` To solve this, you can use `AbstractPlutoDingetjes.Bonds.initial value` https plutojl.org en docs abstractplutodingetjes initial value to tell Julia what the first value will be. This will then be used as the first value instead of `missing`. And if the first bond update from JavaScript is exactly the same, then this first bond update will not trigger a reactive run. \"\"\" md\"\"\" Debouncing Pluto automatically debounces all bonds while cells are running, no intermediate values are sent. Once all cells completed running, any queued bond updates are sent in one batch, but if the value of the same bond changed multiple times, only the last value is set, and intermediate values are discarded. This prevents a \"queue of updates\" that you could get when a bond controls a visualisation that takes a while to run. You could try it below \"\"\" bind fun fast Slider 1 100 fun fast bind fun slow Slider 1 100 let sleep 1 fun slow end html\" span id import \" md\"\"\" `import` – script loading To use external javascript dependencies, you can load them from a CDN, such as jsdelivr.com https www.jsdelivr.com esm.sh https esm.sh Just like when writing a browser app, there are two ways to import JS dependencies a ` script ` tag, and the more modern ES6 import. Technically, this is not API added by Pluto, this will work in any browser context. But we thought it's good to mention here. Loading method 1 ES6 imports We recommend that you use an ES6 import https developer.mozilla.org en US docs Web JavaScript Guide Modules if the library supports it. If it does not, you might be able to still get it using esm.sh https esm.sh Awkward note about syntax Normally, you can import libraries inside JS using the import syntax ```javascript ⛔ do no use import confetti from \"https esm.sh canvas confetti 1.4.0\" import html, render, useEffect from \"https cdn.jsdelivr.net npm htm 3.0.4 preact standalone.mjs\" ``` In Pluto, this is currently not yet supported https github.com fonsp Pluto.jl issues 992 , and you need to use a different syntax as workaround ```javascript ✔ use const default confetti await import \"https esm.sh canvas confetti 1.4.0\" const html, render, useEffect await import \"https cdn.jsdelivr.net npm htm 3.0.4 preact standalone.mjs\" ``` \"\"\" md\"\"\" Loading method 2 script tag ` script src \"...\" ` tags with a `src` attribute set, like this tag to import the d3.js library ```html script src \"https cdn.jsdelivr.net npm d3 6.2.0 dist d3.min.js\" script ``` will work as expected. The execution of other script tags within the same cell is delayed until a `src` script finished loading, and Pluto will make sure that every source file is only loaded once, even if the same ` script ` is included multiple times in multiple cells. \"\"\" md\"\"\" Pinning versions When using a CDN almost never want to use an unpinned import. Always version your CDN imports ```js ⛔ do no use \"https esm.sh canvas confetti\" \"https cdn.jsdelivr.net npm htm preact standalone.mjs\" ✔ use \"https esm.sh canvas confetti 1.4.0\" \"https cdn.jsdelivr.net npm htm 3.0.4 preact standalone.mjs\" ``` \"\"\" html\" span id invalidation \" md\"\"\" `invalidation` – cleanup In a ` script ` you can use the variable `invalidation` , which is a `Promise` https javascript.info promise basics that resolves when the display is about to disappear. You can use this to clean up resources. ```html htl \"\"\\\" script invalidation.then cleanup here script \"\"\\\" ``` 😉 To ObservableHQ users this is the same API as Observable \"\"\" md\"\"\" As a silly example, here is a widget that displays a `String`, and it loops through each of the letters, showing the UTF 16 character codes. The looping animation is created with `setInterval`, and when the display disappears, we use `invalidation` to call `clearInterval` and stop the loop. Why do we need this? Every time you change the text in the `TextField`, this triggers a re render of the cell. If we would not call `clearInterval`, then each text would create a new interval, slowly taking up more resources and slowing down the browser. \"\"\" bind some text TextField default \"Gecko\" htl \"\"\" div h6 some text h6 p 🔡 Letters span style \"font family monospace font weight 900 \" span p script const span currentScript.parentElement.querySelector \"span\" const original text some text let i 0 const interval handler setInterval const index i % original text.length const char original text index span.innerText ` \\ index \\ char code \\ char.codePointAt 0 ` i , 500 invalidation.then clearTimeout interval handler script div \"\"\" html\" span id return \" md\"\"\" `return` – generate DOM from JavaScript If you ` script ` tag returns a `HTMLElement` like a ` div ` or ` input ` , Pluto will prepend that element before the ` script ` element that generated it. This makes it easier to use JavaScript code to create a DOM element. The element is added before , not after the script, so that it's a bit easier to use with ` bind`. \"\"\" htl \"\"\" script const element document.createElement \"h5\" element.innerText \"Whoopsiedoo \" element.style.color \"orange\" return element script \"\"\" details \"Show with syntax highlighting\", md\"\"\" ```htmlmixed script const element document.createElement \"h5\" element.innerText \"Whoopsiedoo \" element.style.color \"orange\" return element script ``` \"\"\" md\"\"\" info \"Persistant display\" Little technical note that you could ignore if the following conditions are met The cell re runs reactively , i.e. because one of the referenced variables re runs, not because you run the cell itself The old display and the new display have an `id` attribute set to the same value. Then the DOM element returned by the old script is shown as placeholder while the new script is running JS runs synchronously, but using top level `await` can cause a delay . This prevents a flash of empty content in between cell renders. In particular, if the new script happens to `return` the exact same element using `this` persistence , then that means the DOM element will always be displayed. \"\"\" html\" span id await \" md\"\"\" `await` – top level support You can use `await` in the top level code of your script. And when your script uses `await`, Pluto will wait for the script to complete before executing the next script. You can use top level `await` to `import` libraries and more. `await` is also used internally by `AbstractPlutoDingetjes.Display.published to js`. Here is a silly example, showing that use can use `await` and that scripts execute sequentially \"\"\" bind await example val TextField default \"coolbeans\" widget htl \"\"\" div p Loading... p script const p currentScript.previousElementSibling const val await example val await new Promise resolve setTimeout p.innerText val resolve , 1000 script div \"\"\" htl \"\"\" widget widget widget \"\"\" html\" span id observablehq \" md\"\"\" ObservableHQ stdlib Pluto is inspired by observablehq.com https observablehq.com , an online reactive notebook for JavaScript. It's REALLY good, try it out We design Pluto's JavaScript runtime to be close to the way you write code in observable. Read more about the observable runtime in their interactive documentation https observablehq.com observablehq observables not javascript . You will find that many features `this`, `return`, `invalidation`, `await` are similar in Pluto and Observable. The following is different in Pluto JavaScript code is not reactive, there are no global variables. Cells can contain multiple script tags, and they will run consecutively also when using `await` We do not yet support async generators, i.e. `yield`. We do not support the observable keywords `viewof` and `mutable`. In Pluto, the `observablehq stdlib` https github.com observablehq stdlib library is pre imported, and you can use `DOM` `Files` `Generators` `Promises` `now` `svg` `html` `require` Currently not supported are `FileAttachment` `md` `Mutable` `resolve` `tex` `width` If you need these libraries, just get in touch. We are also using an outdated version of the stdlib. If you want the latest version, get in touch You can use these libraries in top level scripts, like `html` in this example \"\"\" htl \"\"\" script return html` h5 Hello world h5 ` script \"\"\" html\" span id this \" md\"\"\" `this` – stateful output In Pluto's runtime, there is a distinction between two types of ways that a cell can run 1. An explicit run a run triggered by user input Ctrl S, Shift Enter or clicking the play button or a cell deletion. 2. A reactive re run the cell runs because one of the variables referenced in the cell was redefined by another cell run. One difference is the JavaScript API `this` for an explicit run , the variable `this` is set to `undefined`. But with a reactive run , `this` will take the value of the last thing that was returned by the script. In particular, if you return an HTML node, and the cell runs a second time, then you can access the HTML node using `this`. Two reasons for using this feature are Stateful output you can persist some state in between re renders. Performance you can 'recycle' the previous DOM and update it partially using d3, for example . When doing so, Pluto guarantees that the DOM node will always be visible, without flicker. ☝️ Caveat ` script id ... ` This feature is only enabled for ` script ` tags with the `id` attribute set, e.g. ` script id \"first\" `. Without an `id`, `this` will always be set to `window`. Think of setting the `id` attribute as saying \"I am a Pluto script\". There are two reasons for this One Pluto cell can output multiple scripts, Pluto needs to know which output to assign to which script. Some existing scripts assume that `this` is set to `window` in toplevel code like in the browser . By hiding the `this` feature behind this caveat, we still support libraries that output such scripts. What should the `id` attribute be? This is a bit awkward we don't know yet. For now, just use the name of your favourite ice cream, but we are working on something better https github.com JuliaPluto AbstractPlutoDingetjes.jl pull 7 . Please comment on that PR if you want it \"\"\" trigger \"edit me \" let trigger html\"\"\" script id \"something\" console.log \"'this' is currently \", this if this null return html` blockquote I am running for the first time blockqoute ` else return html` blockquote b I was triggered by reactivity b blockqoute ` script \"\"\" end details \"Show with syntax highlighting\", md\"\"\" ```htmlmixed script id \"something\" console.log \"'this' is currently \", this if this null return html` blockquote I am running for the first time blockqoute ` else return html` blockquote b I was triggered by reactivity b blockqoute ` script ``` \"\"\" md\"\"\" Example d3.js transitions Type the coordinates of the circles here \"\"\" bind positions TextField default \"100, 300\" dot positions try parse. Int , split replace positions, ',' ' ' catch e 100, 300 end dot positions 100, 300 edit me md\"\"\" Notice that, even though the cell below re runs, we smoothly transition between states. We use `this` to maintain the d3 transition states in between reactive runs. \"\"\" htl \"\"\" script src \"https cdn.jsdelivr.net npm d3 6.2.0 dist d3.min.js\" script script id \"hello\" const positions dot positions const svg this null ? DOM.svg 600,200 this const s this null ? d3.select svg this.s s.selectAll \"circle\" .data positions .join \"circle\" .transition .duration 300 .attr \"cx\", d d .attr \"cy\", 100 .attr \"r\", 10 .attr \"fill\", \"gray\" const output svg output.s s return output script \"\"\" details \"Show with syntax highlighting\", md\"\"\" ```htmlmixed script src \"https cdn.jsdelivr.net npm d3 6.2.0 dist d3.min.js\" script script id \"hello\" const positions dot positions const svg this null ? DOM.svg 600,200 this const s this null ? d3.select svg this.s s.selectAll \"circle\" .data positions .join \"circle\" .transition .duration 300 .attr \"cx\", d d .attr \"cy\", 100 .attr \"r\", 10 .attr \"fill\", \"gray\" const output svg output.s s return output script ``` \"\"\" md\"\"\" Example Preact with persistent state \"\"\" md\"\"\" Modify `x`, add and remove elements, and notice that preact maintains its state. \"\"\" x \"hello pluto \", 232000,2,2,12 ,12,2,21,1,2, 120000 details md\"\"\" ```htmlmixed script type \"module\" id \"asdf\" await new Promise r setTimeout r, 1000 const html, render, Component, useEffect, useLayoutEffect, useState, useRef, useMemo, createContext, useContext, await import \"https cdn.jsdelivr.net npm htm 3.0.4 preact standalone.mjs\" const node this ?? document.createElement \"div\" const new state state if this null PREACT APP STARTS HERE const Item value const loading, set loading useState true useEffect set loading true const handle setTimeout set loading false , 1000 return clearTimeout handle , value return html` li \\ loading ? html` em Loading... em ` value li ` const App const state, set state useState new state node.set app state set state return html` h5 Hello world h5 ul \\ state.x.map x,i html` \\ Item value \\ x key \\ i ` ul ` PREACT APP ENDS HERE render html` \\ App `, node else node.set app state new state return node script ``` \"\"\", \"Show with syntax highlighting\" state Dict x x htl \"\"\" script id \"asdf\" await new Promise r setTimeout r, 1000 const html, render, Component, useEffect, useLayoutEffect, useState, useRef, useMemo, createContext, useContext, await import \"https cdn.jsdelivr.net npm htm 3.0.4 preact standalone.mjs\" const node this ?? document.createElement \"div\" const new state state if this null PREACT APP STARTS HERE const Item value const loading, set loading useState true useEffect set loading true const handle setTimeout set loading false , 1000 return clearTimeout handle , value return html` li \\ loading ? html` em Loading... em ` value li ` const App const state, set state useState new state node.set app state set state return html` h5 Hello world h5 ul \\ state.x.map x,i html` \\ Item value \\ x key \\ i ` ul ` PREACT APP ENDS HERE render html` \\ App `, node else node.set app state new state return node script \"\"\" html\" span id getBoundElementValueLikePluto span span id setBoundElementValueLikePluto span span id getBoundElementEventNameLikePluto span \" md\"\"\" Bond internals `getBoundElementValueLikePluto`, `setBoundElementValueLikePluto`, `getBoundElementEventNameLikePluto` Okay this one is not so exciting, but when you use ` bind` ```julia bind x html \" some element some element \" ``` Then Pluto will subscribe to the `\"input\"` event of ` some element `, and take its `.value` property to bind to the Julia variable. Well... almost For some elements, the event name and value getting is different. E.g. with ` button `, we actually listen to `\"click\"` instead of `\"input\"`. And for ` input type range `, we get the `.valueAsNumber` property instead of `.value`. This is what you can use these functions for ```ts getBoundElementValueLikePluto element HTMLElement any setBoundElementValueLikePluto element HTMLElement, value any void getBoundElementEventNameLikePluto element HTMLElement string ``` They can be useful when creating higher order widgets widgets that layer on top of, or interact with other widgets. \"\"\" html\"\"\" span id metadata span span id getNotebookMetadataExperimental span span id setNotebookMetadataExperimental span span id deleteNotebookMetadataExperimental span span id getCellMetadataExperimental span span id setCellMetadataExperimental span span id deleteCellMetadataExperimental span \"\"\" md\"\"\" Metadata for notebooks and cells Notebooks can have metadata, which is stored as TOML content at the top of the `.jl` file. For example, frontmatter https github.com fonsp Pluto.jl pull 2104 is stored as notebook metadata. We have some experimental API that lets you work with notebook metadata from widgets This could be a very powerful feature when used well Note that you can also use sessionStorage localStorage https javascript.info localstorage inside your widgets. Think about what your storage should be persisted for `sessionStorage` reading a notebook, running and changing cells. But when opening the notebook tomorrow, it should be gone. `localStorage` stored for a long time on this browser. Will be there tomorrow, but someone else opening the notebook will not have the data. notebook cell metadata stored permanently in the `.jl` file when someone else opens the notebook, they will continue with your storage. For this, we provide the following API ```ts getNotebookMetadataExperimental key string any setNotebookMetadataExperimental key string, value any Promise void deleteNotebookMetadataExperimental key string Promise void ``` The objects that you store should be TOML serializable stick to simple JS types like String, Number, Array, Object. Return type `Promise void ` means that a promise is returned, that resolves when the data is stored correctly. Cell metadata ```ts getCellMetadataExperimental key string, cell id string? any setCellMetadataExperimental key string, value any, cell id string? Promise void deleteCellMetadataExperimental key string, cell id string? Promise void ``` Providing the `cell id` is only necessary when storing data on another cell than that where your ` script ` is executing. Return type `Promise void ` means that a promise is returned, that resolves when the data is stored correctly. \"\"\" TableOfContents "},{"url":"en/docs/notebooks-online/","title":"📕 Notebooks online – Pluto.jl notebooks as web pages","tags":["docs","publishing","PlutoSliderServer","glass","glassnotebook","github","hosting","web","export","html","netlify"],"text":"How to host Pluto.jl notebooks online When you are done writing your notebook, you can put it on the internet as a website! Notebooks as websites is a core feature of Pluto. This page will explain how you go from a notebook on your computer, say  animals.jl , to a website like  https://example.com/animals , where anyone can read your notebook directly, without needing to install Julia or Pluto. There are many options fitting to different needs. Some are really easy, while others are more complex. 📎 Pluto file formats And good to know: Pluto notebooks are  .jl  files, which only contain the code of your notebook, not the outputs. For example, if your notebook contains  plot(x, y) , then the resulting PNG image is not stored in the  .jl  file. Other people need to install Pluto to open the file. You can also use Pluto to  export  a notebook to a  .html  or  .pdf  file by clicking the   icon. These files  contain outputs , like the plot image. Other people can open these files directly on their computer, without needing to install Pluto. GitHub:  static-export-template If you have a GitHub account, then this is the easiest option. Go to  github.com/JuliaPluto/static-export-template  and follow the easy instructions with screenshots to set up your repository. This sets up a repository with  .jl  notebook files, which are automatically executed, exported and hosted on the cloud. You get a website like  https://username.github.io/my_project  where you can read the notebooks. Pros: Free Works for multiple notebooks Easy notebook updates: changing  .jl  files automatically updates the website Cons: Takes 15-30 minutes to set up (but not too hard!) You need to use GitHub Glass Notebook If you have a GitHub account, then  glassnotebook.io  is a great option for hosting your notebooks online. Glass can also host notebooks  interactively : people who visit your website can interact with sliders and buttons instantly! Glass was made specifically for Pluto.jl, so it works great with Julia and Pluto! Pros: Free (for static notebooks) Ability to host  interactive  notebooks (paid option) Easy user interface Support from developers if things don’t work Cons: You need to use GitHub Netlify drop:  “quick and dirty” If you just have a couple of  .html  files that you exported with Pluto, then you can use  netlify drop  to put them online as a website. Put all  .html  files in one folder on your computer, and drag the folder into netlify drop. This will give you a website! This only works with  .html  files that you exported yourself, not with  .jl  notebook files. Pros: Free Fast and easy Cons: Updating the website with new notebooks requires a bit of care You need a Netlify account No automatic index page listing all notebooks Work in progress, more coming!"},{"url":"en/docs/packages-advanced/","title":"📦 Packages: advanced","tags":["docs","reproducibility"],"text":"Advanced: set up an environment with  Pkg.activate Pluto’s package manager is enabled for all users, for ease of use and to promote reproducibility in scientific computing. There is no option to disable the behaviour  globally  (for your entire Pluto session). Instead, Pluto will detect notebooks that use  Pkg.activate  to set up an environment explicitly, and uses the old behaviour for those notebooks. The philosophy here is that everyone should have a reproducible package environment  by default , without having to do anything. This takes priority over other use cases, and hence  not  using the built-in package manager requires some extra work. Any notebook that calls  Pkg.activate  will not use Pluto’s package management,  and run in ‘backwards compatibility mode’. The  Pkg.activate  call should be placed directly in your notebook code: it is detecting using the same syntax analysis used for reactivity. Pattern: The “global environment” If you do not intend on sharing a notebook file and you want to use your global package environment (called  (v1.6)  or similar, the one you get when you launch the Julia REPL), then you can call  Pkg.activate()  without any arguments. 🙋 If you are developing a package, then activating your global environment is an easy way to test your local version in Pluto. This “global environment” pattern can be placed at the top of a notebook: begin\n    import Pkg\n    # careful: this is _not_ a reproducible environment\n    # activate the global environment\n    Pkg.activate()\n    using Plots, PlutoUI, LinearAlgebra\nend\n When running this in Pluto (try it out!), you will notice that the status marks next to packages disappear, and Pluto is running in ‘backwards compatibility mode’. Packages will no longer be installed or removed automatically, you have to use the Pkg REPL to do this yourself. Pattern: The “shared environment” If you have multiple notebooks in a repository and you want to use share a Pkg environment between them, then you can call  Pkg.activate(path_to_environment) . You can use  @__DIR__  to get the path of the notebook’s folder, and  joinpath(@__DIR__, \"..\")  to get its parent,  joinpath(@__DIR__, \"..\", \"..\")  for the parent’s parent, etc. The function  Base.current_project()  can be used to  automatically  find the closest parent directory that contains a  Project.toml , in most cases this is what you want. For example, if your project looks like this: my_project/\n    data/\n        ...\n    notebooks/\n        Interesting analysis.jl\n        ...\n    Project.toml\n    Manifest.toml\n    ...\n then the “shared environment” pattern can be placed at the top of a notebook: begin\n    import Pkg\n    # activate the shared project environment\n    Pkg.activate(Base.current_project())\n    # instantiate, i.e. make sure that all packages are downloaded\n    Pkg.instantiate()\n    using Plots, PlutoUI, LinearAlgebra\nend\n When running this in Pluto, you will notice that the status marks next to packages disappear, and Pluto is running in ‘backwards compatibility mode’. Packages will no longer be installed or removed automatically, you have to use the Pkg REPL to do this yourself. Pattern: The “Pkg cell” When adding packages, Pluto’s default package management will always install the latest version from the registry. If you need to install a specific version or branch of a package, or a package is not registered, you can use a “Pkg cell”. A common pattern is a so-called “Pkg cell”, placed at the top of a notebook: begin\n    import Pkg\n    # activate a temporary environment\n    Pkg.activate(mktempdir())\n    Pkg.add([\n        Pkg.PackageSpec(name=\"Plots\", version=\"1\"),\n        Pkg.PackageSpec(name=\"PlutoUI\", version=\"0.7\"),\n    ])\n    using Plots, PlutoUI, LinearAlgebra\nend\n This will 1) activate a temporary environment using  Pkg.activate , 2) add the required packages, 3) import them with  using . When running this in Pluto (try it out!), you will notice that the status marks next to packages disappear, and Pluto is running in ‘backwards compatibility mode’. Packages will no longer be installed or removed automatically, you have to use the Pkg REPL to do this yourself. Placing all code in a single  begin  block ensures that the lines will run in the correct order. Advanced: edit the notebook environment Pluto.jl includes a helper function  Pluto.activate_notebook_environment  that activates a notebook Pkg environment in the REPL: julia> import Pluto\n\njulia> Pluto.activate_notebook_environment(\"~/Documents/hello.jl\")\n\njulia> ]\n\n(hello.jl) > status\n After activating a notebook environment, you can use the  Pkg REPL  to view or modify the embedded environment. Changes from either side are synchronised (i.e. Pkg REPL changes are written to the notebook, editing the notebook updates the Pkg REPL env). Watch the demo video:"},{"url":"en/docs/packages/","title":"📦 Packages","tags":["docs","reproducibility"],"text":"Pluto’s built-in  package management Pluto has a  built-in  package manager, which means: 🎈 Packages are  automatically installed  when you use  import  or  using . 🎈 Your package environment is  stored inside the notebook file . When someone else opens your notebook with Pluto, the exact same package environment will be used, and packages will work on their computer. 🙋 These two features are designed to make it easy to write and share  reproducible notebooks . Basic usage Installing and using packages Pluto will automatically install or remove packages while you work on your notebook. When you import a new package, Pluto will install it: 🙋 Most packages will write  installation instructions  in their documentation: like “Run  julia> ] install Example  to install  Example ”. If you are using Pluto, you should  skip these instructions , and import the package directly, using  import Example  or  using Example . Logs Installing packages can take some time, especially when starting Julia for the first time. Click on the status mark next to a package to view the installation progress. You can click on the   icon to view the logs. Removing packages Removing packages is automatic: when you delete code that imports a package, it will be uninstalled from the package environment. It is  recommended  to restart the notebook process afterwards to get a fresh start. Updating packages You can search for and install any available updates by clicking on the   icon. A backup of your notebook file will be created in the same folder as your notebook, in case the new versions do not work as expected. Long waiting times Julia needs to download and precompile packages before you can use them. When using many packages, this can take a  couple of minutes . Before installing a new package, Pluto can give an estimate of how long it will take to install: Pre-installed versions are preferred When adding a package to your notebook, Pluto will ask Pkg to install a version that was previously downloaded on your computer. This was added in May 2024, on older versions, Pkg would always try to install the newest versions. This should make it much faster to open a notebook and import some packages that you already used recently. If you need the latest versions, then you have to use the  Update  button after adding the packages. Package installations are shared between environments In Julia, packages are always installed globally, while  environments  (including notebooks) only store  version information , not the package code itself. This means that multiple notebooks that use the same version of  Plots  will not lead to more disk usage or precompile time. (This is different from  venv  in Python/pip, or  node_modules  in NodeJS/npm, where every environment contains copies of package code by default.) Julia’s package manager is designed to work well with many package environments on the same computer. Of course, if different notebooks use different version of the same package, and you work on both in parallel, then source files for both versions will exist on your computer. A small price to pay for simpler reproducibility! In Julia 1.6, you can clean up package files that have not been used in a while with  import Pkg; Pkg.gc() . In Julia 1.7 and up, this will be done  automatically . Good to know Based on Pkg Pluto’s package management is a wrapper around  Pkg.jl , Julia’s built-in package manager. Packages are installed from the  General registry . 🙋 You can discover all available packages on  juliahub.com . Isolated package environment Every notebook runs in its own isolated package environment. This ensures that your notebook code will not be influenced by packages installed elsewhere. (The  LOAD_PATH  is set to  [\"@\", \"@stdlib\"] .) Notebook file Pluto stores the contents of  Project.toml  and  Manifest.toml  directly in the notebook file. For forwards-backwards compatibility, this is done using two extra “cells” at the bottom of the file, containing the two files as string literals. For example, here is a notebook that imports  HypertextLiteral  and  PlutoUI :  example file . 🙋 Try it out! Open Pluto, import some packages and look at the notebook file! Fully reproducible environments When someone else opens your notebook for the first time, Pluto will install all required packages based on the information in the  Manifest.toml  file. This means that the exact same versions of all packages you used in the notebook will be installed, ensuring your work is fully reproducible when shared with others. Compatibility across Pluto versions When opening an old Pluto notebook that does not have embedded project files, Pluto will generate them as if you typed those imports for the first time. If a call to  Pkg.activate  is made, the notebook will run in ‘backwards compatibility mode’, using the same environment and behaviour as old Pluto versions. Compatibility across Julia versions The  Manifest.toml  is designed to be (generally)  backwards compatible : you can upgrade Julia and use an old manifest. However, the  Manifest.toml  is not always  forwards compatible : a manifest generated generated with a newer version of Julia might not run on older versions. Pluto will always try to load the embedded manifest, and if it fails, it will  discard the manifest  (leaving only  Project.toml ) and try again. This is one reason why Pluto automatically adds  [compat]  ranges for each package in the  Project.toml . Custom registries Pkg.jl supports additional private or public registries, which can be added in the Julia REPL with  ] registry add https://github.com/myuser/MyRegistry.git , and this is also supported by Pluto’s package managemer. However, note that registries are not stored in the  Project.toml / Manifest.toml  files, which means that other people can only open your notebook if they added the custom registry before doing so. Alternatively, you can use a “Pkg cell” (more on this later) where you add the registry before adding packages. Learn more: advanced Pkg management"},{"url":"en/docs/search/","title":"Search results","tags":[],"text":"window.init_search(); Search Results \nLoading..."},{"url":"en/docs/threejs/","title":"Three.js in Pluto – example of using a JS library","tags":["javascript","web","widgets","advanced","docs"],"text":"Fons wrote a short tutorial for using three.js in Pluto, as an example of using a JavaScript library in Pluto to create a simple visualisation library. Available at  featured.plutojl.org/web/threejs !"},{"url":"en/docs/update/","title":"🌸 How to update","tags":["docs","introduction"],"text":"Update your Pluto installation You can update Pluto using the Julia package manager. Open a Julia process and use Pkg to update Pluto: julia> import Pkg\njulia> Pkg.update(\"Pluto\")\n This should update Pluto to the latest version  (check our  GitHub releases  to find out!) . Not the latest version? Sometimes, it is not possible to install the latest version of Pluto because of  compatibility issues with other packages  that you have installed in your environment. First, use  Pkg.status()  to find out which packages you have installed, and remove any packages that you are no longer using. Now try to update again. If this did not work, try updating all packages (not just Pluto) with  Pkg.update() . Finally, you could use  Pkg.status(outdated=true, mode=Pkg.PKGMODE_MANIFEST)  to see the compatibility bounds.  Here is an example . \nconst latest = fetch(\"https://api.github.com/repos/fonsp/Pluto.jl/releases\", {\nmethod: \"GET\",\nmode: \"cors\",\ncache: \"no-cache\",\nheaders: {\n    \"Content-Type\": \"application/json\",\n},\nredirect: \"follow\",\nreferrerPolicy: \"no-referrer\",\n}).then(r => r.json()).then(r => r.reverse()).then(releases => releases[releases.length - 1].tag_name)\nlatest.then(v => {\nconst el = document.querySelector(\"#latesthere\")\nconsole.log(el, v)\nel.innerText = v\nel.style.fontWeight = \"bold\"\n})"}]